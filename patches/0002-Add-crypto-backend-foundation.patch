From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Thu, 30 Jun 2022 10:03:03 +0200
Subject: [PATCH] Add crypto backend foundation

---
 src/crypto/aes/cipher.go                     |   2 +-
 src/crypto/aes/cipher_asm.go                 |   2 +-
 src/crypto/boring/boring.go                  |   2 +-
 src/crypto/des/cipher.go                     |   7 +
 src/crypto/ecdh/ecdh.go                      |   2 +-
 src/crypto/ecdh/nist.go                      |   2 +-
 src/crypto/ecdsa/boring.go                   |   4 +-
 src/crypto/ecdsa/ecdsa.go                    |   4 +-
 src/crypto/ecdsa/notboring.go                |   2 +-
 src/crypto/ed25519/boring.go                 |  71 +++++++
 src/crypto/ed25519/ed25519.go                |  75 ++++++-
 src/crypto/ed25519/ed25519_test.go           |   2 +-
 src/crypto/ed25519/notboring.go              |  16 ++
 src/crypto/hmac/hmac.go                      |   2 +-
 src/crypto/hmac/hmac_test.go                 |   2 +-
 src/crypto/internal/backend/backend_test.go  |  30 +++
 src/crypto/internal/backend/bbig/big.go      |  17 ++
 src/crypto/internal/backend/common.go        |  99 +++++++++
 src/crypto/internal/backend/isrequirefips.go |   9 +
 src/crypto/internal/backend/nobackend.go     | 201 +++++++++++++++++++
 src/crypto/internal/backend/norequirefips.go |   9 +
 src/crypto/internal/backend/stub.s           |  10 +
 src/crypto/md5/md5.go                        |   7 +
 src/crypto/md5/md5_test.go                   |  14 ++
 src/crypto/purego_test.go                    |   2 +-
 src/crypto/rand/rand.go                      |   2 +-
 src/crypto/rand/rand_test.go                 |   2 +-
 src/crypto/rc4/rc4.go                        |  18 ++
 src/crypto/rsa/boring.go                     |   4 +-
 src/crypto/rsa/notboring.go                  |   2 +-
 src/crypto/rsa/pkcs1v15.go                   |  10 +-
 src/crypto/rsa/pkcs1v15_test.go              |   5 +
 src/crypto/rsa/pss.go                        |   8 +-
 src/crypto/rsa/rsa.go                        |  21 +-
 src/crypto/rsa/rsa_test.go                   |  12 +-
 src/crypto/sha1/sha1.go                      |   2 +-
 src/crypto/sha1/sha1_test.go                 |  12 +-
 src/crypto/sha256/sha256.go                  |   6 +-
 src/crypto/sha256/sha256_test.go             |  20 +-
 src/crypto/sha512/sha512.go                  |   2 +-
 src/crypto/sha512/sha512_test.go             |  20 +-
 src/crypto/tls/boring_test.go                |   5 +
 src/crypto/tls/cipher_suites.go              |   2 +-
 src/crypto/tls/handshake_client.go           |  25 ++-
 src/crypto/tls/handshake_server.go           |  25 ++-
 src/crypto/tls/handshake_server_tls13.go     |  10 +
 src/crypto/tls/key_schedule.go               |  18 +-
 src/crypto/tls/prf.go                        |  77 ++++---
 src/crypto/tls/prf_test.go                   |  12 +-
 src/crypto/x509/boring_test.go               |   5 +
 src/go/build/deps_test.go                    |   4 +
 src/hash/boring_test.go                      |   5 +
 src/hash/marshal_test.go                     |   5 +
 src/hash/notboring_test.go                   |   5 +
 src/net/smtp/smtp_test.go                    |  72 ++++---
 src/runtime/runtime_boring.go                |   5 +
 56 files changed, 908 insertions(+), 106 deletions(-)
 create mode 100644 src/crypto/ed25519/boring.go
 create mode 100644 src/crypto/ed25519/notboring.go
 create mode 100644 src/crypto/internal/backend/backend_test.go
 create mode 100644 src/crypto/internal/backend/bbig/big.go
 create mode 100644 src/crypto/internal/backend/common.go
 create mode 100644 src/crypto/internal/backend/isrequirefips.go
 create mode 100644 src/crypto/internal/backend/nobackend.go
 create mode 100644 src/crypto/internal/backend/norequirefips.go
 create mode 100644 src/crypto/internal/backend/stub.s
 create mode 100644 src/hash/boring_test.go
 create mode 100644 src/hash/notboring_test.go

diff --git a/src/crypto/aes/cipher.go b/src/crypto/aes/cipher.go
index cde2e45d2ca559..cf47a4fc57d8e2 100644
--- a/src/crypto/aes/cipher.go
+++ b/src/crypto/aes/cipher.go
@@ -7,7 +7,7 @@ package aes
 import (
 	"crypto/cipher"
 	"crypto/internal/alias"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"strconv"
 )
 
diff --git a/src/crypto/aes/cipher_asm.go b/src/crypto/aes/cipher_asm.go
index 3e5f589c2cdd0b..e9d3c0be11ef61 100644
--- a/src/crypto/aes/cipher_asm.go
+++ b/src/crypto/aes/cipher_asm.go
@@ -9,7 +9,7 @@ package aes
 import (
 	"crypto/cipher"
 	"crypto/internal/alias"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"internal/cpu"
 	"internal/goarch"
 )
diff --git a/src/crypto/boring/boring.go b/src/crypto/boring/boring.go
index 097c37e343fdb8..1cf43edba40359 100644
--- a/src/crypto/boring/boring.go
+++ b/src/crypto/boring/boring.go
@@ -13,7 +13,7 @@
 // is satisfied, so that applications can tag files that use this package.
 package boring
 
-import "crypto/internal/boring"
+import boring "crypto/internal/backend"
 
 // Enabled reports whether BoringCrypto handles supported crypto operations.
 func Enabled() bool {
diff --git a/src/crypto/des/cipher.go b/src/crypto/des/cipher.go
index 04b73e7d3bf758..0891652a4566fb 100644
--- a/src/crypto/des/cipher.go
+++ b/src/crypto/des/cipher.go
@@ -7,6 +7,7 @@ package des
 import (
 	"crypto/cipher"
 	"crypto/internal/alias"
+	boring "crypto/internal/backend"
 	"internal/byteorder"
 	"strconv"
 )
@@ -30,6 +31,9 @@ func NewCipher(key []byte) (cipher.Block, error) {
 	if len(key) != 8 {
 		return nil, KeySizeError(len(key))
 	}
+	if boring.Enabled && boring.SupportsDESCipher() {
+		return boring.NewDESCipher(key)
+	}
 
 	c := new(desCipher)
 	c.generateSubkeys(key)
@@ -74,6 +78,9 @@ func NewTripleDESCipher(key []byte) (cipher.Block, error) {
 	if len(key) != 24 {
 		return nil, KeySizeError(len(key))
 	}
+	if boring.Enabled && boring.SupportsTripleDESCipher() {
+		return boring.NewTripleDESCipher(key)
+	}
 
 	c := new(tripleDESCipher)
 	c.cipher1.generateSubkeys(key[:8])
diff --git a/src/crypto/ecdh/ecdh.go b/src/crypto/ecdh/ecdh.go
index b7c26f91e57f02..7a12e2bbaaafd1 100644
--- a/src/crypto/ecdh/ecdh.go
+++ b/src/crypto/ecdh/ecdh.go
@@ -8,7 +8,7 @@ package ecdh
 
 import (
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/subtle"
 	"errors"
 	"io"
diff --git a/src/crypto/ecdh/nist.go b/src/crypto/ecdh/nist.go
index b91e8f38a5a78e..2bb8f3486c8249 100644
--- a/src/crypto/ecdh/nist.go
+++ b/src/crypto/ecdh/nist.go
@@ -5,7 +5,7 @@
 package ecdh
 
 import (
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/nistec"
 	"crypto/internal/randutil"
 	"errors"
diff --git a/src/crypto/ecdsa/boring.go b/src/crypto/ecdsa/boring.go
index 275c60b4de49eb..61e70f981db4eb 100644
--- a/src/crypto/ecdsa/boring.go
+++ b/src/crypto/ecdsa/boring.go
@@ -7,8 +7,8 @@
 package ecdsa
 
 import (
-	"crypto/internal/boring"
-	"crypto/internal/boring/bbig"
+	boring "crypto/internal/backend"
+	"crypto/internal/backend/bbig"
 	"crypto/internal/boring/bcache"
 	"math/big"
 )
diff --git a/src/crypto/ecdsa/ecdsa.go b/src/crypto/ecdsa/ecdsa.go
index 2179b01e8e3db5..9eb763cecfe687 100644
--- a/src/crypto/ecdsa/ecdsa.go
+++ b/src/crypto/ecdsa/ecdsa.go
@@ -30,9 +30,9 @@ import (
 	"crypto/cipher"
 	"crypto/ecdh"
 	"crypto/elliptic"
+	boring "crypto/internal/backend"
+	"crypto/internal/backend/bbig"
 	"crypto/internal/bigmod"
-	"crypto/internal/boring"
-	"crypto/internal/boring/bbig"
 	"crypto/internal/nistec"
 	"crypto/internal/randutil"
 	"crypto/sha512"
diff --git a/src/crypto/ecdsa/notboring.go b/src/crypto/ecdsa/notboring.go
index 039bd82ed21f9f..19188518e85e65 100644
--- a/src/crypto/ecdsa/notboring.go
+++ b/src/crypto/ecdsa/notboring.go
@@ -6,7 +6,7 @@
 
 package ecdsa
 
-import "crypto/internal/boring"
+import boring "crypto/internal/backend"
 
 func boringPublicKey(*PublicKey) (*boring.PublicKeyECDSA, error) {
 	panic("boringcrypto: not available")
diff --git a/src/crypto/ed25519/boring.go b/src/crypto/ed25519/boring.go
new file mode 100644
index 00000000000000..3a7d7b76c8d8d7
--- /dev/null
+++ b/src/crypto/ed25519/boring.go
@@ -0,0 +1,71 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.systemcrypto
+
+package ed25519
+
+import (
+	boring "crypto/internal/backend"
+	"crypto/internal/boring/bcache"
+	"unsafe"
+)
+
+var pubCache bcache.Cache[byte, boringPub]
+var privCache bcache.Cache[byte, boringPriv]
+
+func init() {
+	if boring.Enabled && boring.SupportsEd25519() {
+		pubCache.Register()
+		privCache.Register()
+	}
+}
+
+type boringPub struct {
+	key  *boring.PublicKeyEd25519
+	orig [PublicKeySize]byte
+}
+
+func boringPublicKey(pub PublicKey) (*boring.PublicKeyEd25519, error) {
+	// Use the pointer to the underlying pub array as key.
+	p := unsafe.SliceData(pub)
+	b := pubCache.Get(p)
+	if b != nil && PublicKey(b.orig[:]).Equal(pub) {
+		return b.key, nil
+	}
+
+	b = new(boringPub)
+	copy(b.orig[:], pub)
+	key, err := boring.NewPublicKeyEd25119(b.orig[:])
+	if err != nil {
+		return nil, err
+	}
+	b.key = key
+	pubCache.Put(p, b)
+	return key, nil
+}
+
+type boringPriv struct {
+	key  *boring.PrivateKeyEd25519
+	orig [PrivateKeySize]byte
+}
+
+func boringPrivateKey(priv PrivateKey) (*boring.PrivateKeyEd25519, error) {
+	// Use the pointer to the underlying priv array as key.
+	p := unsafe.SliceData(priv)
+	b := privCache.Get(p)
+	if b != nil && PrivateKey(b.orig[:]).Equal(priv) {
+		return b.key, nil
+	}
+
+	b = new(boringPriv)
+	copy(b.orig[:], priv)
+	key, err := boring.NewPrivateKeyEd25119(b.orig[:])
+	if err != nil {
+		return nil, err
+	}
+	b.key = key
+	privCache.Put(p, b)
+	return key, nil
+}
diff --git a/src/crypto/ed25519/ed25519.go b/src/crypto/ed25519/ed25519.go
index b75c5a6458a218..303ea08c4b747f 100644
--- a/src/crypto/ed25519/ed25519.go
+++ b/src/crypto/ed25519/ed25519.go
@@ -18,6 +18,7 @@ package ed25519
 import (
 	"bytes"
 	"crypto"
+	boring "crypto/internal/backend"
 	"crypto/internal/edwards25519"
 	cryptorand "crypto/rand"
 	"crypto/sha512"
@@ -25,6 +26,7 @@ import (
 	"errors"
 	"io"
 	"strconv"
+	"sync"
 )
 
 const (
@@ -142,6 +144,22 @@ func GenerateKey(rand io.Reader) (PublicKey, PrivateKey, error) {
 	if rand == nil {
 		rand = cryptorand.Reader
 	}
+	if boring.Enabled && boring.SupportsEd25519() {
+		if rand == boring.RandReader {
+			priv, err := boring.GenerateKeyEd25519()
+			if err != nil {
+				return nil, nil, err
+			}
+			privData, err := priv.Bytes()
+			if err != nil {
+				return nil, nil, err
+			}
+			privKey := PrivateKey(privData)
+			pubKey := privKey.Public().(PublicKey)
+			return pubKey, privKey, err
+		}
+		boring.UnreachableExceptTests()
+	}
 
 	seed := make([]byte, SeedSize)
 	if _, err := io.ReadFull(rand, seed); err != nil {
@@ -160,6 +178,17 @@ func GenerateKey(rand io.Reader) (PublicKey, PrivateKey, error) {
 // with RFC 8032. RFC 8032's private keys correspond to seeds in this
 // package.
 func NewKeyFromSeed(seed []byte) PrivateKey {
+	if boring.Enabled && boring.SupportsEd25519() {
+		key, err := boring.NewPrivateKeyEd25519FromSeed(seed)
+		if err != nil {
+			panic(err)
+		}
+		d, err := key.Bytes()
+		if err != nil {
+			panic(err)
+		}
+		return PrivateKey(d)
+	}
 	// Outline the function body so that the returned key can be stack-allocated.
 	privateKey := make([]byte, PrivateKeySize)
 	newKeyFromSeed(privateKey, seed)
@@ -187,6 +216,17 @@ func newKeyFromSeed(privateKey, seed []byte) {
 // Sign signs the message with privateKey and returns a signature. It will
 // panic if len(privateKey) is not [PrivateKeySize].
 func Sign(privateKey PrivateKey, message []byte) []byte {
+	if boring.Enabled && boring.SupportsEd25519() {
+		priv, err := boringPrivateKey(privateKey)
+		if err != nil {
+			panic(err)
+		}
+		signature, err := boring.SignEd25519(priv, message)
+		if err != nil {
+			panic(err)
+		}
+		return signature
+	}
 	// Outline the function body so that the returned signature can be
 	// stack-allocated.
 	signature := make([]byte, SignatureSize)
@@ -265,9 +305,42 @@ func sign(signature, privateKey, message []byte, domPrefix, context string) {
 // The inputs are not considered confidential, and may leak through timing side
 // channels, or if an attacker has control of part of the inputs.
 func Verify(publicKey PublicKey, message, sig []byte) bool {
+	if boring.Enabled && boring.SupportsEd25519() && testMalleability() {
+		pub, err := boringPublicKey(publicKey)
+		if err != nil {
+			return false
+		}
+		return boring.VerifyEd25519(pub, message, sig) == nil
+	}
 	return verify(publicKey, message, sig, domPrefixPure, "")
 }
 
+// testMalleability returns true if the crypto backend correctly rejects
+// malleable signatures. The only known backend that fails to do so is
+// OpenSSL version 1.1.1a or lower.
+// See https://github.com/openssl/openssl/issues/7693.
+var testMalleability = sync.OnceValue(func() bool {
+	msg := []byte{0x54, 0x65, 0x73, 0x74}
+	sig := []byte{
+		0x7c, 0x38, 0xe0, 0x26, 0xf2, 0x9e, 0x14, 0xaa, 0xbd, 0x05, 0x9a,
+		0x0f, 0x2d, 0xb8, 0xb0, 0xcd, 0x78, 0x30, 0x40, 0x60, 0x9a, 0x8b,
+		0xe6, 0x84, 0xdb, 0x12, 0xf8, 0x2a, 0x27, 0x77, 0x4a, 0xb0, 0x67,
+		0x65, 0x4b, 0xce, 0x38, 0x32, 0xc2, 0xd7, 0x6f, 0x8f, 0x6f, 0x5d,
+		0xaf, 0xc0, 0x8d, 0x93, 0x39, 0xd4, 0xee, 0xf6, 0x76, 0x57, 0x33,
+		0x36, 0xa5, 0xc5, 0x1e, 0xb6, 0xf9, 0x46, 0xb3, 0x1d,
+	}
+	pkey := []byte{
+		0x7d, 0x4d, 0x0e, 0x7f, 0x61, 0x53, 0xa6, 0x9b, 0x62, 0x42, 0xb5,
+		0x22, 0xab, 0xbe, 0xe6, 0x85, 0xfd, 0xa4, 0x42, 0x0f, 0x88, 0x34,
+		0xb1, 0x08, 0xc3, 0xbd, 0xae, 0x36, 0x9e, 0xf5, 0x49, 0xfa,
+	}
+	pub, err := boring.NewPublicKeyEd25119(pkey)
+	if err != nil {
+		return false
+	}
+	return boring.VerifyEd25519(pub, msg, sig) != nil
+})
+
 // VerifyWithOptions reports whether sig is a valid signature of message by
 // publicKey. A valid signature is indicated by returning a nil error. It will
 // panic if len(publicKey) is not [PublicKeySize].
@@ -301,7 +374,7 @@ func VerifyWithOptions(publicKey PublicKey, message, sig []byte, opts *Options)
 		}
 		return nil
 	case opts.Hash == crypto.Hash(0): // Ed25519
-		if !verify(publicKey, message, sig, domPrefixPure, "") {
+		if !Verify(publicKey, message, sig) {
 			return errors.New("ed25519: invalid signature")
 		}
 		return nil
diff --git a/src/crypto/ed25519/ed25519_test.go b/src/crypto/ed25519/ed25519_test.go
index 64901328a5e8c5..51cd6d0c8bc682 100644
--- a/src/crypto/ed25519/ed25519_test.go
+++ b/src/crypto/ed25519/ed25519_test.go
@@ -9,7 +9,7 @@ import (
 	"bytes"
 	"compress/gzip"
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/rand"
 	"crypto/sha512"
 	"encoding/hex"
diff --git a/src/crypto/ed25519/notboring.go b/src/crypto/ed25519/notboring.go
new file mode 100644
index 00000000000000..b0cdd44d81c753
--- /dev/null
+++ b/src/crypto/ed25519/notboring.go
@@ -0,0 +1,16 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build !goexperiment.systemcrypto
+
+package ed25519
+
+import boring "crypto/internal/backend"
+
+func boringPublicKey(PublicKey) (*boring.PublicKeyEd25519, error) {
+	panic("boringcrypto: not available")
+}
+func boringPrivateKey(PrivateKey) (*boring.PrivateKeyEd25519, error) {
+	panic("boringcrypto: not available")
+}
diff --git a/src/crypto/hmac/hmac.go b/src/crypto/hmac/hmac.go
index b8c909cf015aa7..9f517e8e527363 100644
--- a/src/crypto/hmac/hmac.go
+++ b/src/crypto/hmac/hmac.go
@@ -22,7 +22,7 @@ timing side-channels:
 package hmac
 
 import (
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/fips/hmac"
 	"crypto/subtle"
 	"hash"
diff --git a/src/crypto/hmac/hmac_test.go b/src/crypto/hmac/hmac_test.go
index 7accad763244a1..dd3211f2c37af3 100644
--- a/src/crypto/hmac/hmac_test.go
+++ b/src/crypto/hmac/hmac_test.go
@@ -5,7 +5,7 @@
 package hmac
 
 import (
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/cryptotest"
 	"crypto/md5"
 	"crypto/sha1"
diff --git a/src/crypto/internal/backend/backend_test.go b/src/crypto/internal/backend/backend_test.go
new file mode 100644
index 00000000000000..c2c06d3bff8c74
--- /dev/null
+++ b/src/crypto/internal/backend/backend_test.go
@@ -0,0 +1,30 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package backend
+
+import (
+	"testing"
+)
+
+// Test that Unreachable panics.
+func TestUnreachable(t *testing.T) {
+	defer func() {
+		if Enabled {
+			if err := recover(); err == nil {
+				t.Fatal("expected Unreachable to panic")
+			}
+		} else {
+			if err := recover(); err != nil {
+				t.Fatalf("expected Unreachable to be a no-op")
+			}
+		}
+	}()
+	Unreachable()
+}
+
+// Test that UnreachableExceptTests does not panic (this is a test).
+func TestUnreachableExceptTests(t *testing.T) {
+	UnreachableExceptTests()
+}
diff --git a/src/crypto/internal/backend/bbig/big.go b/src/crypto/internal/backend/bbig/big.go
new file mode 100644
index 00000000000000..85bd3ed083f5b2
--- /dev/null
+++ b/src/crypto/internal/backend/bbig/big.go
@@ -0,0 +1,17 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build !boringcrypto
+
+package bbig
+
+import "math/big"
+
+func Enc(b *big.Int) []uint {
+	return nil
+}
+
+func Dec(b []uint) *big.Int {
+	return nil
+}
diff --git a/src/crypto/internal/backend/common.go b/src/crypto/internal/backend/common.go
new file mode 100644
index 00000000000000..183aedbf668e83
--- /dev/null
+++ b/src/crypto/internal/backend/common.go
@@ -0,0 +1,99 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package backend
+
+import (
+	"crypto"
+	"crypto/internal/boring/sig"
+	"runtime"
+	"syscall"
+)
+
+func init() {
+	if v, r, ok := envGoFIPS(); ok && v == "1" {
+		if !Enabled {
+			if runtime.GOOS != "linux" && runtime.GOOS != "windows" {
+				panic("FIPS mode requested (" + r + ") but no crypto backend is supported on " + runtime.GOOS)
+			}
+			panic("FIPS mode requested (" + r + ") but no supported crypto backend is enabled")
+		}
+	}
+}
+
+func envGoFIPS() (value string, reason string, ok bool) {
+	// TODO: Decide which environment variable to use.
+	// See https://github.com/microsoft/go/issues/397.
+	var varName string
+	if value, ok = syscall.Getenv("GOFIPS"); ok {
+		varName = "GOFIPS"
+	} else if value, ok = syscall.Getenv("GOLANG_FIPS"); ok {
+		varName = "GOLANG_FIPS"
+	}
+	if isRequireFIPS {
+		if ok && value != "1" {
+			panic("the 'requirefips' build tag is enabled, but it conflicts " +
+				"with the detected env variable " +
+				varName + "=" + value +
+				" which would disable FIPS mode")
+		}
+		return "1", "requirefips tag set", true
+	}
+	if ok {
+		return value, "environment variable " + varName + "=1", true
+	}
+	return "", "", false
+}
+
+// Unreachable marks code that should be unreachable
+// when backend is in use.
+func Unreachable() {
+	if Enabled {
+		panic("cryptobackend: invalid code execution")
+	} else {
+		// Code that's unreachable is exactly the code
+		// we want to detect for reporting standard Go crypto.
+		sig.StandardCrypto()
+	}
+}
+
+// Provided by runtime.crypto_backend_runtime_arg0 to avoid os import.
+func runtime_arg0() string
+
+func hasSuffix(s, t string) bool {
+	return len(s) > len(t) && s[len(s)-len(t):] == t
+}
+
+// UnreachableExceptTests marks code that should be unreachable
+// when backend is in use. It panics.
+func UnreachableExceptTests() {
+	if Enabled {
+		name := runtime_arg0()
+		// If ran on Windows we'd need to allow _test.exe and .test.exe as well.
+		if !hasSuffix(name, "_test") && !hasSuffix(name, ".test") {
+			println("cryptobackend: unexpected code execution in", name)
+			panic("cryptobackend: invalid code execution")
+		}
+	}
+}
+
+// SupportsRSAPrimes reports whether the number of primes is supported for RSA keys.
+func SupportsRSAPrimes(primes int) bool {
+	return supportsRSAPrimes(primes)
+}
+
+// SupportsPKCS1v15Hash reports whether the hash function is supported for use in PKCS#1 v1.5 signatures.
+func SupportsPKCS1v15Hash(h crypto.Hash) bool {
+	return supportsPKCS1v15Hash(h)
+}
+
+// SupportsRSAHash reports whether the hash function is supported for use in RSA signatures and encryption.
+func SupportsRSAHash(h crypto.Hash) bool {
+	return supportsRSAHash(h)
+}
+
+// SupportsSalt reports whether the salt length is supported.
+func SupportsSalt(salt int) bool {
+	return supportsSalt(salt)
+}
diff --git a/src/crypto/internal/backend/isrequirefips.go b/src/crypto/internal/backend/isrequirefips.go
new file mode 100644
index 00000000000000..e5d7570d6d4363
--- /dev/null
+++ b/src/crypto/internal/backend/isrequirefips.go
@@ -0,0 +1,9 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build requirefips
+
+package backend
+
+const isRequireFIPS = true
diff --git a/src/crypto/internal/backend/nobackend.go b/src/crypto/internal/backend/nobackend.go
new file mode 100644
index 00000000000000..75b60e6d4bf70c
--- /dev/null
+++ b/src/crypto/internal/backend/nobackend.go
@@ -0,0 +1,201 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Do not edit the build constraint by hand. It is generated by "backendgen.go".
+
+//go:build ignore
+
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"hash"
+	"io"
+)
+
+const Enabled = false
+
+type BigInt = []uint
+
+type randReader int
+
+func (randReader) Read(b []byte) (int, error) { panic("cryptobackend: not available") }
+
+const RandReader = randReader(0)
+
+func SupportsHash(h crypto.Hash) bool { panic("cryptobackend: not available") }
+
+func NewMD5() hash.Hash    { panic("cryptobackend: not available") }
+func NewSHA1() hash.Hash   { panic("cryptobackend: not available") }
+func NewSHA224() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA256() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA384() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA512() hash.Hash { panic("cryptobackend: not available") }
+
+func MD5(p []byte) (sum [16]byte)    { panic("cryptobackend: not available") }
+func SHA1(p []byte) (sum [20]byte)   { panic("cryptobackend: not available") }
+func SHA224(p []byte) (sum [28]byte) { panic("cryptobackend: not available") }
+func SHA256(p []byte) (sum [32]byte) { panic("cryptobackend: not available") }
+func SHA384(p []byte) (sum [48]byte) { panic("cryptobackend: not available") }
+func SHA512(p []byte) (sum [64]byte) { panic("cryptobackend: not available") }
+
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash { panic("cryptobackend: not available") }
+
+func NewAESCipher(key []byte) (cipher.Block, error)   { panic("cryptobackend: not available") }
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error)   { panic("cryptobackend: not available") }
+func NewGCMTLS13(c cipher.Block) (cipher.AEAD, error) { panic("cryptobackend: not available") }
+
+type PublicKeyECDSA struct{ _ int }
+type PrivateKeyECDSA struct{ _ int }
+
+func GenerateKeyECDSA(curve string) (X, Y, D BigInt, err error) {
+	panic("cryptobackend: not available")
+}
+func NewPrivateKeyECDSA(curve string, X, Y, D BigInt) (*PrivateKeyECDSA, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyECDSA(curve string, X, Y BigInt) (*PublicKeyECDSA, error) {
+	panic("cryptobackend: not available")
+}
+func SignMarshalECDSA(priv *PrivateKeyECDSA, hash []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func VerifyECDSA(pub *PublicKeyECDSA, hash []byte, sig []byte) bool {
+	panic("cryptobackend: not available")
+}
+
+type PublicKeyRSA struct{ _ int }
+type PrivateKeyRSA struct{ _ int }
+
+func DecryptRSAOAEP(h, mgfHash hash.Hash, priv *PrivateKeyRSA, ciphertext, label []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func DecryptRSAPKCS1(priv *PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func DecryptRSANoPadding(priv *PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSAOAEP(h, mgfHash hash.Hash, pub *PublicKeyRSA, msg, label []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSAPKCS1(pub *PublicKeyRSA, msg []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSANoPadding(pub *PublicKeyRSA, msg []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func GenerateKeyRSA(bits int) (N, E, D, P, Q, Dp, Dq, Qinv BigInt, err error) {
+	panic("cryptobackend: not available")
+}
+func NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv BigInt) (*PrivateKeyRSA, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyRSA(N, E BigInt) (*PublicKeyRSA, error) {
+	panic("cryptobackend: not available")
+}
+func SignRSAPKCS1v15(priv *PrivateKeyRSA, h crypto.Hash, hashed []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func SignRSAPSS(priv *PrivateKeyRSA, h crypto.Hash, hashed []byte, saltLen int) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func VerifyRSAPKCS1v15(pub *PublicKeyRSA, h crypto.Hash, hashed, sig []byte) error {
+	panic("cryptobackend: not available")
+}
+func VerifyRSAPSS(pub *PublicKeyRSA, h crypto.Hash, hashed, sig []byte, saltLen int) error {
+	panic("cryptobackend: not available")
+}
+
+type PublicKeyECDH struct{}
+type PrivateKeyECDH struct{}
+
+func ECDH(*PrivateKeyECDH, *PublicKeyECDH) ([]byte, error)    { panic("cryptobackend: not available") }
+func GenerateKeyECDH(string) (*PrivateKeyECDH, []byte, error) { panic("cryptobackend: not available") }
+func NewPrivateKeyECDH(string, []byte) (*PrivateKeyECDH, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyECDH(string, []byte) (*PublicKeyECDH, error) { panic("cryptobackend: not available") }
+func (*PublicKeyECDH) Bytes() []byte                          { panic("cryptobackend: not available") }
+func (*PrivateKeyECDH) PublicKey() (*PublicKeyECDH, error)    { panic("cryptobackend: not available") }
+
+func SupportsHKDF() bool { panic("cryptobackend: not available") }
+
+func ExpandHKDF(h func() hash.Hash, pseudorandomKey, info []byte) (io.Reader, error) {
+	panic("cryptobackend: not available")
+}
+
+func ExtractHKDF(h func() hash.Hash, secret, salt []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func SupportsTLS1PRF() bool { panic("cryptobackend: not available") }
+
+func TLS1PRF(result, secret, label, seed []byte, h func() hash.Hash) error {
+	panic("cryptobackend: not available")
+}
+
+func SupportsDESCipher() bool { panic("cryptobackend: not available") }
+
+func SupportsTripleDESCipher() bool { panic("cryptobackend: not available") }
+
+func NewDESCipher(key []byte) (cipher.Block, error) { panic("cryptobackend: not available") }
+
+func NewTripleDESCipher(key []byte) (cipher.Block, error) { panic("cryptobackend: not available") }
+
+func SupportsRC4() bool { panic("cryptobackend: not available") }
+
+type RC4Cipher struct{}
+
+func (c *RC4Cipher) Reset()                       { panic("cryptobackend: not available") }
+func (c *RC4Cipher) XORKeyStream(dst, src []byte) { panic("cryptobackend: not available") }
+
+func NewRC4Cipher(key []byte) (*RC4Cipher, error) { panic("cryptobackend: not available") }
+
+func SupportsEd25519() bool { panic("cryptobackend: not available") }
+
+type PublicKeyEd25519 struct{}
+
+func (k *PublicKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+type PrivateKeyEd25519 struct{}
+
+func (k *PrivateKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func GenerateKeyEd25519() (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25119(priv []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPublicKeyEd25119(pub []byte) (*PublicKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25519FromSeed(seed []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func SignEd25519(priv *PrivateKeyEd25519, message []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func VerifyEd25519(pub *PublicKeyEd25519, message, sig []byte) error {
+	panic("cryptobackend: not available")
+}
+
+func supportsRSAPrimes(primes int) bool { return false }
+
+func supportsPKCS1v15Hash(h crypto.Hash) bool { return false }
+
+func supportsRSAHash(h crypto.Hash) bool { return false }
+
+func supportsSalt(salt int) bool { return true }
diff --git a/src/crypto/internal/backend/norequirefips.go b/src/crypto/internal/backend/norequirefips.go
new file mode 100644
index 00000000000000..26bfb5f6a643f3
--- /dev/null
+++ b/src/crypto/internal/backend/norequirefips.go
@@ -0,0 +1,9 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build !requirefips
+
+package backend
+
+const isRequireFIPS = false
diff --git a/src/crypto/internal/backend/stub.s b/src/crypto/internal/backend/stub.s
new file mode 100644
index 00000000000000..5e4b436554d44d
--- /dev/null
+++ b/src/crypto/internal/backend/stub.s
@@ -0,0 +1,10 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// runtime_arg0 is declared in common.go without a body.
+// It's provided by package runtime,
+// but the go command doesn't know that.
+// Having this assembly file keeps the go command
+// from complaining about the missing body
+// (because the implementation might be here).
diff --git a/src/crypto/md5/md5.go b/src/crypto/md5/md5.go
index c984c3f4968598..229dd457f8d53c 100644
--- a/src/crypto/md5/md5.go
+++ b/src/crypto/md5/md5.go
@@ -12,6 +12,7 @@ package md5
 
 import (
 	"crypto"
+	boring "crypto/internal/backend"
 	"errors"
 	"hash"
 	"internal/byteorder"
@@ -103,6 +104,9 @@ func consumeUint32(b []byte) ([]byte, uint32) {
 // [encoding.BinaryUnmarshaler] to marshal and unmarshal the internal
 // state of the hash.
 func New() hash.Hash {
+	if boring.Enabled && boring.SupportsHash(crypto.MD5) {
+		return boring.NewMD5()
+	}
 	d := new(digest)
 	d.Reset()
 	return d
@@ -180,6 +184,9 @@ func (d *digest) checkSum() [Size]byte {
 
 // Sum returns the MD5 checksum of the data.
 func Sum(data []byte) [Size]byte {
+	if boring.Enabled && boring.SupportsHash(crypto.MD5) {
+		return boring.MD5(data)
+	}
 	var d digest
 	d.Reset()
 	d.Write(data)
diff --git a/src/crypto/md5/md5_test.go b/src/crypto/md5/md5_test.go
index 6a8258a67e860c..61ea6b5153f617 100644
--- a/src/crypto/md5/md5_test.go
+++ b/src/crypto/md5/md5_test.go
@@ -6,6 +6,7 @@ package md5
 
 import (
 	"bytes"
+	boring "crypto/internal/backend"
 	"crypto/internal/cryptotest"
 	"crypto/rand"
 	"encoding"
@@ -88,6 +89,11 @@ func TestGolden(t *testing.T) {
 }
 
 func TestGoldenMarshal(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryMarshaler); !ok {
+			t.Skip("BinaryMarshaler not implemented")
+		}
+	}
 	for _, g := range golden {
 		h := New()
 		h2 := New()
@@ -157,6 +163,9 @@ func TestLarge(t *testing.T) {
 
 // Tests that blockGeneric (pure Go) and block (in assembly for amd64, 386, arm) match.
 func TestBlockGeneric(t *testing.T) {
+	if boring.Enabled {
+		t.Skip("digest is not used when boring.Enabled is set")
+	}
 	gen, asm := New().(*digest), New().(*digest)
 	buf := make([]byte, BlockSize*20) // arbitrary factor
 	rand.Read(buf)
@@ -204,6 +213,11 @@ func safeSum(h hash.Hash) (sum []byte, err error) {
 }
 
 func TestLargeHashes(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryUnmarshaler); !ok {
+			t.Skip("BinaryUnmarshaler not implemented")
+		}
+	}
 	for i, test := range largeUnmarshalTests {
 
 		h := New()
diff --git a/src/crypto/purego_test.go b/src/crypto/purego_test.go
index 62be347e0c6822..d284b5cf7814a6 100644
--- a/src/crypto/purego_test.go
+++ b/src/crypto/purego_test.go
@@ -41,7 +41,7 @@ func TestPureGoTag(t *testing.T) {
 	}
 
 	for _, pkgName := range pkgs {
-		if strings.Contains(pkgName, "/boring") {
+		if strings.Contains(pkgName, "/boring") || strings.Contains(pkgName, "/internal/backend") || strings.Contains(pkgName, "tls/fipsonly") {
 			continue
 		}
 
diff --git a/src/crypto/rand/rand.go b/src/crypto/rand/rand.go
index b3d0a7368f7fa0..c34b994a67a289 100644
--- a/src/crypto/rand/rand.go
+++ b/src/crypto/rand/rand.go
@@ -7,7 +7,7 @@
 package rand
 
 import (
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"io"
 	"os"
 	"sync"
diff --git a/src/crypto/rand/rand_test.go b/src/crypto/rand/rand_test.go
index 63581b75fdbc7f..dd220c7c544f76 100644
--- a/src/crypto/rand/rand_test.go
+++ b/src/crypto/rand/rand_test.go
@@ -7,7 +7,7 @@ package rand
 import (
 	"bytes"
 	"compress/flate"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"errors"
 	"internal/race"
 	"internal/testenv"
diff --git a/src/crypto/rc4/rc4.go b/src/crypto/rc4/rc4.go
index 67452ec39f0fd4..47726d0ebe38d9 100644
--- a/src/crypto/rc4/rc4.go
+++ b/src/crypto/rc4/rc4.go
@@ -11,6 +11,7 @@ package rc4
 
 import (
 	"crypto/internal/alias"
+	boring "crypto/internal/backend"
 	"strconv"
 )
 
@@ -18,6 +19,8 @@ import (
 type Cipher struct {
 	s    [256]uint32
 	i, j uint8
+
+	boring *boring.RC4Cipher
 }
 
 type KeySizeError int
@@ -33,6 +36,13 @@ func NewCipher(key []byte) (*Cipher, error) {
 	if k < 1 || k > 256 {
 		return nil, KeySizeError(k)
 	}
+	if boring.Enabled && boring.SupportsRC4() {
+		c, err := boring.NewRC4Cipher(key)
+		if err != nil {
+			return nil, err
+		}
+		return &Cipher{boring: c}, nil
+	}
 	var c Cipher
 	for i := 0; i < 256; i++ {
 		c.s[i] = uint32(i)
@@ -50,6 +60,10 @@ func NewCipher(key []byte) (*Cipher, error) {
 // Deprecated: Reset can't guarantee that the key will be entirely removed from
 // the process's memory.
 func (c *Cipher) Reset() {
+	if boring.Enabled && boring.SupportsRC4() {
+		c.boring.Reset()
+		return
+	}
 	for i := range c.s {
 		c.s[i] = 0
 	}
@@ -59,6 +73,10 @@ func (c *Cipher) Reset() {
 // XORKeyStream sets dst to the result of XORing src with the key stream.
 // Dst and src must overlap entirely or not at all.
 func (c *Cipher) XORKeyStream(dst, src []byte) {
+	if boring.Enabled && boring.SupportsRC4() {
+		c.boring.XORKeyStream(dst, src)
+		return
+	}
 	if len(src) == 0 {
 		return
 	}
diff --git a/src/crypto/rsa/boring.go b/src/crypto/rsa/boring.go
index b9f9d3154f2589..ecb43aaf264743 100644
--- a/src/crypto/rsa/boring.go
+++ b/src/crypto/rsa/boring.go
@@ -7,8 +7,8 @@
 package rsa
 
 import (
-	"crypto/internal/boring"
-	"crypto/internal/boring/bbig"
+	boring "crypto/internal/backend"
+	"crypto/internal/backend/bbig"
 	"crypto/internal/boring/bcache"
 	"math/big"
 )
diff --git a/src/crypto/rsa/notboring.go b/src/crypto/rsa/notboring.go
index 2abc0436405f8a..34c22c8fbba7da 100644
--- a/src/crypto/rsa/notboring.go
+++ b/src/crypto/rsa/notboring.go
@@ -6,7 +6,7 @@
 
 package rsa
 
-import "crypto/internal/boring"
+import boring "crypto/internal/backend"
 
 func boringPublicKey(*PublicKey) (*boring.PublicKeyRSA, error) {
 	panic("boringcrypto: not available")
diff --git a/src/crypto/rsa/pkcs1v15.go b/src/crypto/rsa/pkcs1v15.go
index 2f958022f98584..b5e9bb2b1f50d2 100644
--- a/src/crypto/rsa/pkcs1v15.go
+++ b/src/crypto/rsa/pkcs1v15.go
@@ -7,7 +7,7 @@ package rsa
 import (
 	"bytes"
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/randutil"
 	"crypto/subtle"
 	"errors"
@@ -95,7 +95,7 @@ func DecryptPKCS1v15(random io.Reader, priv *PrivateKey, ciphertext []byte) ([]b
 		return nil, err
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsRSAPrimes(len(priv.Primes)) {
 		bkey, err := boringPrivateKey(priv)
 		if err != nil {
 			return nil, err
@@ -189,7 +189,7 @@ func decryptPKCS1v15(priv *PrivateKey, ciphertext []byte) (valid int, em []byte,
 		return
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsRSAPrimes(len(priv.Primes)) {
 		var bkey *boring.PrivateKeyRSA
 		bkey, err = boringPrivateKey(priv)
 		if err != nil {
@@ -293,7 +293,7 @@ func SignPKCS1v15(random io.Reader, priv *PrivateKey, hash crypto.Hash, hashed [
 		return nil, err
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsRSAPrimes(len(priv.Primes)) && boring.SupportsPKCS1v15Hash(hash) {
 		bkey, err := boringPrivateKey(priv)
 		if err != nil {
 			return nil, err
@@ -343,7 +343,7 @@ func pkcs1v15ConstructEM(pub *PublicKey, hash crypto.Hash, hashed []byte) ([]byt
 // The inputs are not considered confidential, and may leak through timing side
 // channels, or if an attacker has control of part of the inputs.
 func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) error {
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsPKCS1v15Hash(hash) {
 		bkey, err := boringPublicKey(pub)
 		if err != nil {
 			return err
diff --git a/src/crypto/rsa/pkcs1v15_test.go b/src/crypto/rsa/pkcs1v15_test.go
index dfa1eddc886ff3..849dafacf93d0f 100644
--- a/src/crypto/rsa/pkcs1v15_test.go
+++ b/src/crypto/rsa/pkcs1v15_test.go
@@ -7,6 +7,7 @@ package rsa_test
 import (
 	"bytes"
 	"crypto"
+	boring "crypto/internal/backend"
 	"crypto/rand"
 	. "crypto/rsa"
 	"crypto/sha1"
@@ -229,6 +230,10 @@ func TestVerifyPKCS1v15(t *testing.T) {
 }
 
 func TestOverlongMessagePKCS1v15(t *testing.T) {
+	if boring.Enabled {
+		// See for example https://github.com/golang-fips/openssl/pull/142.
+		t.Skip("Some backends do not return an error for overlong messages.")
+	}
 	ciphertext := decodeBase64("fjOVdirUzFoLlukv80dBllMLjXythIf22feqPrNo0YoIjzyzyoMFiLjAc/Y4krkeZ11XFThIrEvw\nkRiZcCq5ng==")
 	_, err := DecryptPKCS1v15(nil, rsaPrivateKey, ciphertext)
 	if err == nil {
diff --git a/src/crypto/rsa/pss.go b/src/crypto/rsa/pss.go
index 5716c464ca0a33..c231073e3838cc 100644
--- a/src/crypto/rsa/pss.go
+++ b/src/crypto/rsa/pss.go
@@ -9,7 +9,7 @@ package rsa
 import (
 	"bytes"
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"errors"
 	"hash"
 	"io"
@@ -214,7 +214,7 @@ func signPSSWithSalt(priv *PrivateKey, hash crypto.Hash, hashed, salt []byte) ([
 		return nil, err
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsRSAPrimes(len(priv.Primes)) {
 		bkey, err := boringPrivateKey(priv)
 		if err != nil {
 			return nil, err
@@ -300,7 +300,7 @@ func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, digest []byte,
 		hash = opts.Hash
 	}
 
-	if boring.Enabled && rand == boring.RandReader {
+	if boring.Enabled && rand == boring.RandReader && boring.SupportsRSAPrimes(len(priv.Primes)) && boring.SupportsRSAHash(hash) {
 		bkey, err := boringPrivateKey(priv)
 		if err != nil {
 			return nil, err
@@ -342,7 +342,7 @@ func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, digest []byte,
 // The inputs are not considered confidential, and may leak through timing side
 // channels, or if an attacker has control of part of the inputs.
 func VerifyPSS(pub *PublicKey, hash crypto.Hash, digest []byte, sig []byte, opts *PSSOptions) error {
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsSalt(opts.saltLength()) && boring.SupportsRSAHash(hash) {
 		bkey, err := boringPublicKey(pub)
 		if err != nil {
 			return err
diff --git a/src/crypto/rsa/rsa.go b/src/crypto/rsa/rsa.go
index 4d78d1eaaa6be0..a48e0543000c6c 100644
--- a/src/crypto/rsa/rsa.go
+++ b/src/crypto/rsa/rsa.go
@@ -26,14 +26,15 @@ package rsa
 
 import (
 	"crypto"
+	boring "crypto/internal/backend"
+	"crypto/internal/backend/bbig"
 	"crypto/internal/bigmod"
-	"crypto/internal/boring"
-	"crypto/internal/boring/bbig"
 	"crypto/internal/randutil"
 	"crypto/rand"
 	"crypto/subtle"
 	"errors"
 	"hash"
+	"internal/goexperiment"
 	"io"
 	"math"
 	"math/big"
@@ -479,7 +480,13 @@ func mgf1XOR(out []byte, hash hash.Hash, seed []byte) {
 var ErrMessageTooLong = errors.New("crypto/rsa: message too long for RSA key size")
 
 func encrypt(pub *PublicKey, plaintext []byte) ([]byte, error) {
-	boring.Unreachable()
+	if goexperiment.BoringCrypto {
+		// encrypt is reached when the hash function or the salt length
+		// are not supported by the crypto backend. BoringCrypto does
+		// support everything, so use it to check that we don't
+		// accidentally reach this code path.
+		boring.Unreachable()
+	}
 
 	N, err := bigmod.NewModulusFromBig(pub.N)
 	if err != nil {
@@ -638,7 +645,11 @@ const noCheck = false
 // m^e is calculated and compared with ciphertext, in order to defend against
 // errors in the CRT computation.
 func decrypt(priv *PrivateKey, ciphertext []byte, check bool) ([]byte, error) {
-	if len(priv.Primes) <= 2 {
+	if goexperiment.BoringCrypto {
+		// decrypt is reached when the hash function or the number of primers
+		// are not supported by the crypto backend. BoringCrypto does
+		// support everything, so use it to check that we don't
+		// accidentally reach this code path.
 		boring.Unreachable()
 	}
 
@@ -718,7 +729,7 @@ func decryptOAEP(hash, mgfHash hash.Hash, random io.Reader, priv *PrivateKey, ci
 		return nil, ErrDecryption
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && hash == mgfHash && boring.SupportsRSAPrimes(len(priv.Primes)) {
 		bkey, err := boringPrivateKey(priv)
 		if err != nil {
 			return nil, err
diff --git a/src/crypto/rsa/rsa_test.go b/src/crypto/rsa/rsa_test.go
index 2afa045a3a0bd2..c6294694521c69 100644
--- a/src/crypto/rsa/rsa_test.go
+++ b/src/crypto/rsa/rsa_test.go
@@ -8,7 +8,7 @@ import (
 	"bufio"
 	"bytes"
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/rand"
 	. "crypto/rsa"
 	"crypto/sha1"
@@ -113,6 +113,11 @@ func testKeyBasics(t *testing.T, priv *PrivateKey) {
 	if priv.D.Cmp(priv.N) > 0 {
 		t.Errorf("private exponent too large")
 	}
+	if boring.Enabled && priv.N.BitLen() < 512 {
+		// Some crypto backends (e.g. CNG and OpenSSL with SymCrypt) don't support key sizes
+		// lower than 512 and intentionally fail rather than fall back to Go crypto.
+		t.Skip("skipping allocations test with BoringCrypto")
+	}
 
 	msg := []byte("hi!")
 	enc, err := EncryptPKCS1v15(rand.Reader, &priv.PublicKey, msg)
@@ -187,6 +192,11 @@ func testEverything(t *testing.T, priv *PrivateKey) {
 	if err := priv.Validate(); err != nil {
 		t.Errorf("Validate() failed: %s", err)
 	}
+	if boring.Enabled && priv.N.BitLen() < 512 {
+		// Some crypto backends (e.g. CNG and OpenSSL with SymCrypt) don't support key sizes
+		// lower than 512 and intentionally fail rather than fall back to Go crypto.
+		t.Skip("skipping allocations test with BoringCrypto")
+	}
 
 	msg := []byte("test")
 	enc, err := EncryptPKCS1v15(rand.Reader, &priv.PublicKey, msg)
diff --git a/src/crypto/sha1/sha1.go b/src/crypto/sha1/sha1.go
index 8189d1946d8ea5..8f5f7f27f26fea 100644
--- a/src/crypto/sha1/sha1.go
+++ b/src/crypto/sha1/sha1.go
@@ -10,7 +10,7 @@ package sha1
 
 import (
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"errors"
 	"hash"
 	"internal/byteorder"
diff --git a/src/crypto/sha1/sha1_test.go b/src/crypto/sha1/sha1_test.go
index d03892c57d4e61..f848659c6e4aa3 100644
--- a/src/crypto/sha1/sha1_test.go
+++ b/src/crypto/sha1/sha1_test.go
@@ -8,7 +8,7 @@ package sha1
 
 import (
 	"bytes"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/cryptotest"
 	"crypto/rand"
 	"encoding"
@@ -97,6 +97,11 @@ func TestGolden(t *testing.T) {
 }
 
 func TestGoldenMarshal(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryMarshaler); !ok {
+			t.Skip("BinaryMarshaler not implemented")
+		}
+	}
 	h := New()
 	h2 := New()
 	for _, g := range golden {
@@ -210,6 +215,11 @@ func safeSum(h hash.Hash) (sum []byte, err error) {
 }
 
 func TestLargeHashes(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryMarshaler); !ok {
+			t.Skip("BinaryMarshaler not implemented")
+		}
+	}
 	for i, test := range largeUnmarshalTests {
 
 		h := New()
diff --git a/src/crypto/sha256/sha256.go b/src/crypto/sha256/sha256.go
index d87c689c9001ad..7584c380af0cec 100644
--- a/src/crypto/sha256/sha256.go
+++ b/src/crypto/sha256/sha256.go
@@ -8,7 +8,7 @@ package sha256
 
 import (
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/fips/sha256"
 	"hash"
 )
@@ -43,7 +43,7 @@ func New() hash.Hash {
 // [encoding.BinaryUnmarshaler] to marshal and unmarshal the internal
 // state of the hash.
 func New224() hash.Hash {
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsHash(crypto.SHA224) {
 		return boring.NewSHA224()
 	}
 	return sha256.New224()
@@ -63,7 +63,7 @@ func Sum256(data []byte) [Size]byte {
 
 // Sum224 returns the SHA224 checksum of the data.
 func Sum224(data []byte) [Size224]byte {
-	if boring.Enabled {
+	if boring.Enabled && boring.SupportsHash(crypto.SHA224) {
 		return boring.SHA224(data)
 	}
 	h := New224()
diff --git a/src/crypto/sha256/sha256_test.go b/src/crypto/sha256/sha256_test.go
index ffd16386515830..58632c01dc6a7f 100644
--- a/src/crypto/sha256/sha256_test.go
+++ b/src/crypto/sha256/sha256_test.go
@@ -8,7 +8,7 @@ package sha256
 
 import (
 	"bytes"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/cryptotest"
 	"encoding"
 	"fmt"
@@ -157,6 +157,11 @@ func testGoldenMarshal(t *testing.T) {
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
+			if boring.Enabled {
+				if _, ok := tt.newHash().(encoding.BinaryMarshaler); !ok {
+					t.Skip("BinaryMarshaler not implemented")
+				}
+			}
 			for _, g := range tt.gold {
 				h := tt.newHash()
 				h2 := tt.newHash()
@@ -206,6 +211,14 @@ func TestMarshalTypeMismatch(t *testing.T) {
 	h1 := New()
 	h2 := New224()
 
+	if boring.Enabled {
+		_, ok1 := h1.(encoding.BinaryMarshaler)
+		_, ok2 := h2.(encoding.BinaryUnmarshaler)
+		if !ok1 || !ok2 {
+			t.Skip("BinaryMarshaler not implemented")
+		}
+	}
+
 	state1, err := h1.(encoding.BinaryMarshaler).MarshalBinary()
 	if err != nil {
 		t.Errorf("could not marshal: %v", err)
@@ -277,6 +290,11 @@ func safeSum(h hash.Hash) (sum []byte, err error) {
 	return h.Sum(nil), nil
 }
 func TestLargeHashes(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryUnmarshaler); !ok {
+			t.Skip("BinaryUnmarshaler not implemented")
+		}
+	}
 	for i, test := range largeUnmarshalTests {
 
 		h := New()
diff --git a/src/crypto/sha512/sha512.go b/src/crypto/sha512/sha512.go
index 0a12fde7bc060b..ca752598e4343a 100644
--- a/src/crypto/sha512/sha512.go
+++ b/src/crypto/sha512/sha512.go
@@ -12,7 +12,7 @@ package sha512
 
 import (
 	"crypto"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/fips/sha512"
 	"hash"
 )
diff --git a/src/crypto/sha512/sha512_test.go b/src/crypto/sha512/sha512_test.go
index fdad37b1863ae8..cf6e4c395cd4fb 100644
--- a/src/crypto/sha512/sha512_test.go
+++ b/src/crypto/sha512/sha512_test.go
@@ -8,7 +8,7 @@ package sha512
 
 import (
 	"bytes"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/internal/cryptotest"
 	"encoding"
 	"encoding/hex"
@@ -746,6 +746,11 @@ func testGoldenMarshal(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			for _, test := range tt.golden {
+				if boring.Enabled {
+					if _, ok := tt.newHash().(encoding.BinaryMarshaler); !ok {
+						t.Skip("BinaryMarshaler not implemented")
+					}
+				}
 				h := tt.newHash()
 				h2 := tt.newHash()
 
@@ -807,6 +812,14 @@ func TestMarshalMismatch(t *testing.T) {
 			h1 := fn1()
 			h2 := fn2()
 
+			if boring.Enabled {
+				_, ok1 := h1.(encoding.BinaryMarshaler)
+				_, ok2 := h2.(encoding.BinaryUnmarshaler)
+				if !ok1 || !ok2 {
+					t.Skip("BinaryMarshaler not implemented")
+				}
+			}
+
 			state, err := h1.(encoding.BinaryMarshaler).MarshalBinary()
 			if err != nil {
 				t.Errorf("i=%d: could not marshal: %v", i, err)
@@ -882,6 +895,11 @@ func safeSum(h hash.Hash) (sum []byte, err error) {
 }
 
 func TestLargeHashes(t *testing.T) {
+	if boring.Enabled {
+		if _, ok := New().(encoding.BinaryUnmarshaler); !ok {
+			t.Skip("BinaryUnmarshaler not implemented")
+		}
+	}
 	for i, test := range largeUnmarshalTests {
 
 		h := New()
diff --git a/src/crypto/tls/boring_test.go b/src/crypto/tls/boring_test.go
index 56050421985927..dcbd33167e4499 100644
--- a/src/crypto/tls/boring_test.go
+++ b/src/crypto/tls/boring_test.go
@@ -25,6 +25,11 @@ import (
 	"time"
 )
 
+func init() {
+	// crypto/tls expects fipstls.Required() to be false.
+	fipstls.Abandon()
+}
+
 func allCipherSuitesIncludingTLS13() []uint16 {
 	s := allCipherSuites()
 	for _, suite := range cipherSuitesTLS13 {
diff --git a/src/crypto/tls/cipher_suites.go b/src/crypto/tls/cipher_suites.go
index 917a1eff42d34f..f6f57130b64f41 100644
--- a/src/crypto/tls/cipher_suites.go
+++ b/src/crypto/tls/cipher_suites.go
@@ -10,7 +10,7 @@ import (
 	"crypto/cipher"
 	"crypto/des"
 	"crypto/hmac"
-	"crypto/internal/boring"
+	boring "crypto/internal/backend"
 	"crypto/rc4"
 	"crypto/sha1"
 	"crypto/sha256"
diff --git a/src/crypto/tls/handshake_client.go b/src/crypto/tls/handshake_client.go
index 760e827f467f15..99b44d259e1e02 100644
--- a/src/crypto/tls/handshake_client.go
+++ b/src/crypto/tls/handshake_client.go
@@ -770,12 +770,16 @@ func (hs *clientHandshakeState) doFullHandshake() error {
 
 	if hs.serverHello.extendedMasterSecret {
 		c.extMasterSecret = true
-		hs.masterSecret = extMasterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
+		hs.masterSecret, err = extMasterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
 			hs.finishedHash.Sum())
 	} else {
-		hs.masterSecret = masterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
+		hs.masterSecret, err = masterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
 			hs.hello.random, hs.serverHello.random)
 	}
+	if err != nil {
+		c.sendAlert(alertInternalError)
+		return err
+	}
 	if err := c.config.writeKeyLog(keyLogLabelTLS12, hs.hello.random, hs.masterSecret); err != nil {
 		c.sendAlert(alertInternalError)
 		return errors.New("tls: failed to write to key log: " + err.Error())
@@ -836,8 +840,12 @@ func (hs *clientHandshakeState) doFullHandshake() error {
 func (hs *clientHandshakeState) establishKeys() error {
 	c := hs.c
 
-	clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV :=
+	clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV, err :=
 		keysFromMasterSecret(c.vers, hs.suite, hs.masterSecret, hs.hello.random, hs.serverHello.random, hs.suite.macLen, hs.suite.keyLen, hs.suite.ivLen)
+	if err != nil {
+		c.sendAlert(alertInternalError)
+		return err
+	}
 	var clientCipher, serverCipher any
 	var clientHash, serverHash hash.Hash
 	if hs.suite.cipher != nil {
@@ -977,7 +985,11 @@ func (hs *clientHandshakeState) readFinished(out []byte) error {
 		return unexpectedMessageError(serverFinished, msg)
 	}
 
-	verify := hs.finishedHash.serverSum(hs.masterSecret)
+	verify, err := hs.finishedHash.serverSum(hs.masterSecret)
+	if err != nil {
+		c.sendAlert(alertHandshakeFailure)
+		return err
+	}
 	if len(verify) != len(serverFinished.verifyData) ||
 		subtle.ConstantTimeCompare(verify, serverFinished.verifyData) != 1 {
 		c.sendAlert(alertHandshakeFailure)
@@ -1045,7 +1057,10 @@ func (hs *clientHandshakeState) sendFinished(out []byte) error {
 	}
 
 	finished := new(finishedMsg)
-	finished.verifyData = hs.finishedHash.clientSum(hs.masterSecret)
+	var err error
+	if finished.verifyData, err = hs.finishedHash.clientSum(hs.masterSecret); err != nil {
+		return err
+	}
 	if _, err := hs.c.writeHandshakeRecord(finished, &hs.finishedHash); err != nil {
 		return err
 	}
diff --git a/src/crypto/tls/handshake_server.go b/src/crypto/tls/handshake_server.go
index bc4e51ba364cf1..8b4fc36e49fdf8 100644
--- a/src/crypto/tls/handshake_server.go
+++ b/src/crypto/tls/handshake_server.go
@@ -686,12 +686,16 @@ func (hs *serverHandshakeState) doFullHandshake() error {
 	}
 	if hs.hello.extendedMasterSecret {
 		c.extMasterSecret = true
-		hs.masterSecret = extMasterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
+		hs.masterSecret, err = extMasterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
 			hs.finishedHash.Sum())
 	} else {
-		hs.masterSecret = masterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
+		hs.masterSecret, err = masterFromPreMasterSecret(c.vers, hs.suite, preMasterSecret,
 			hs.clientHello.random, hs.hello.random)
 	}
+	if err != nil {
+		c.sendAlert(alertInternalError)
+		return err
+	}
 	if err := c.config.writeKeyLog(keyLogLabelTLS12, hs.clientHello.random, hs.masterSecret); err != nil {
 		c.sendAlert(alertInternalError)
 		return err
@@ -755,8 +759,12 @@ func (hs *serverHandshakeState) doFullHandshake() error {
 func (hs *serverHandshakeState) establishKeys() error {
 	c := hs.c
 
-	clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV :=
+	clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV, err :=
 		keysFromMasterSecret(c.vers, hs.suite, hs.masterSecret, hs.clientHello.random, hs.hello.random, hs.suite.macLen, hs.suite.keyLen, hs.suite.ivLen)
+	if err != nil {
+		c.sendAlert(alertInternalError)
+		return err
+	}
 
 	var clientCipher, serverCipher any
 	var clientHash, serverHash hash.Hash
@@ -797,7 +805,11 @@ func (hs *serverHandshakeState) readFinished(out []byte) error {
 		return unexpectedMessageError(clientFinished, msg)
 	}
 
-	verify := hs.finishedHash.clientSum(hs.masterSecret)
+	verify, err := hs.finishedHash.clientSum(hs.masterSecret)
+	if err != nil {
+		c.sendAlert(alertHandshakeFailure)
+		return err
+	}
 	if len(verify) != len(clientFinished.verifyData) ||
 		subtle.ConstantTimeCompare(verify, clientFinished.verifyData) != 1 {
 		c.sendAlert(alertHandshakeFailure)
@@ -859,7 +871,10 @@ func (hs *serverHandshakeState) sendFinished(out []byte) error {
 	}
 
 	finished := new(finishedMsg)
-	finished.verifyData = hs.finishedHash.serverSum(hs.masterSecret)
+	var err error
+	if finished.verifyData, err = hs.finishedHash.serverSum(hs.masterSecret); err != nil {
+		return err
+	}
 	if _, err := hs.c.writeHandshakeRecord(finished, &hs.finishedHash); err != nil {
 		return err
 	}
diff --git a/src/crypto/tls/handshake_server_tls13.go b/src/crypto/tls/handshake_server_tls13.go
index b8cf4c3fa50b24..bc5d32a29c50c4 100644
--- a/src/crypto/tls/handshake_server_tls13.go
+++ b/src/crypto/tls/handshake_server_tls13.go
@@ -9,6 +9,7 @@ import (
 	"context"
 	"crypto"
 	"crypto/hmac"
+	boring "crypto/internal/backend"
 	"crypto/internal/mlkem768"
 	"crypto/rsa"
 	"errors"
@@ -441,6 +442,15 @@ func cloneHash(in hash.Hash, h crypto.Hash) hash.Hash {
 	}
 	marshaler, ok := in.(binaryMarshaler)
 	if !ok {
+		if boring.Enabled {
+			// CNG and OpenSSL with SymCrypt hash functions do not implement the
+			// encoding.BinaryMarshaler interface, but they do implement the Clone method.
+			if cloner, ok := in.(interface{ Clone() (hash.Hash, error) }); ok {
+				if out, err := cloner.Clone(); err == nil {
+					return out
+				}
+			}
+		}
 		return nil
 	}
 	state, err := marshaler.MarshalBinary()
diff --git a/src/crypto/tls/key_schedule.go b/src/crypto/tls/key_schedule.go
index 1636baf79e7288..c9a5877d3d504f 100644
--- a/src/crypto/tls/key_schedule.go
+++ b/src/crypto/tls/key_schedule.go
@@ -61,7 +61,16 @@ func (c *cipherSuiteTLS13) expandLabel(secret []byte, label string, context []by
 		panic(fmt.Errorf("failed to construct HKDF label: %s", err))
 	}
 	out := make([]byte, length)
-	n, err := hkdf.Expand(c.hash.New, secret, hkdfLabelBytes).Read(out)
+	var r io.Reader
+	if boring.Enabled && boring.SupportsHKDF() {
+		r, err = boring.ExpandHKDF(c.hash.New, secret, hkdfLabelBytes)
+		if err != nil {
+			panic(fmt.Errorf("tls: HKDF-Expand-Label invocation failed unexpectedly: %s", err))
+		}
+	} else {
+		r = hkdf.Expand(c.hash.New, secret, hkdfLabelBytes)
+	}
+	n, err := r.Read(out)
 	if err != nil || n != length {
 		panic("tls: HKDF-Expand-Label invocation failed unexpectedly")
 	}
@@ -81,6 +90,13 @@ func (c *cipherSuiteTLS13) extract(newSecret, currentSecret []byte) []byte {
 	if newSecret == nil {
 		newSecret = make([]byte, c.hash.Size())
 	}
+	if boring.Enabled && boring.SupportsHKDF() {
+		prk, err := boring.ExtractHKDF(c.hash.New, newSecret, currentSecret)
+		if err != nil {
+			panic(fmt.Errorf("tls: HKDF-Extract invocation failed unexpectedly: %s", err))
+		}
+		return prk
+	}
 	return hkdf.Extract(c.hash.New, newSecret, currentSecret)
 }
 
diff --git a/src/crypto/tls/prf.go b/src/crypto/tls/prf.go
index a7fa3370e66c82..3470372b567eba 100644
--- a/src/crypto/tls/prf.go
+++ b/src/crypto/tls/prf.go
@@ -7,6 +7,7 @@ package tls
 import (
 	"crypto"
 	"crypto/hmac"
+	boring "crypto/internal/backend"
 	"crypto/md5"
 	"crypto/sha1"
 	"crypto/sha256"
@@ -45,7 +46,13 @@ func pHash(result, secret, seed []byte, hash func() hash.Hash) {
 }
 
 // prf10 implements the TLS 1.0 pseudo-random function, as defined in RFC 2246, Section 5.
-func prf10(result, secret, label, seed []byte) {
+func prf10(result, secret, label, seed []byte) error {
+	if boring.Enabled && boring.SupportsTLS1PRF() && boring.SupportsHash(crypto.MD5SHA1) {
+		if err := boring.TLS1PRF(result, secret, label, seed, nil); err != nil {
+			return fmt.Errorf("crypto/tls: prf10: %v", err)
+		}
+		return nil
+	}
 	hashSHA1 := sha1.New
 	hashMD5 := md5.New
 
@@ -61,16 +68,24 @@ func prf10(result, secret, label, seed []byte) {
 	for i, b := range result2 {
 		result[i] ^= b
 	}
+	return nil
 }
 
 // prf12 implements the TLS 1.2 pseudo-random function, as defined in RFC 5246, Section 5.
-func prf12(hashFunc func() hash.Hash) func(result, secret, label, seed []byte) {
-	return func(result, secret, label, seed []byte) {
+func prf12(h crypto.Hash, hashFunc func() hash.Hash) func(result, secret, label, seed []byte) error {
+	return func(result, secret, label, seed []byte) error {
+		if boring.Enabled && boring.SupportsTLS1PRF() && boring.SupportsHash(h) {
+			if err := boring.TLS1PRF(result, secret, label, seed, hashFunc); err != nil {
+				return fmt.Errorf("crypto/tls: prf12: %v", err)
+			}
+			return nil
+		}
 		labelAndSeed := make([]byte, len(label)+len(seed))
 		copy(labelAndSeed, label)
 		copy(labelAndSeed[len(label):], seed)
 
 		pHash(result, secret, labelAndSeed, hashFunc)
+		return nil
 	}
 }
 
@@ -85,56 +100,64 @@ var keyExpansionLabel = []byte("key expansion")
 var clientFinishedLabel = []byte("client finished")
 var serverFinishedLabel = []byte("server finished")
 
-func prfAndHashForVersion(version uint16, suite *cipherSuite) (func(result, secret, label, seed []byte), crypto.Hash) {
+func prfAndHashForVersion(version uint16, suite *cipherSuite) (func(result, secret, label, seed []byte) error, crypto.Hash) {
 	switch version {
 	case VersionTLS10, VersionTLS11:
 		return prf10, crypto.Hash(0)
 	case VersionTLS12:
 		if suite.flags&suiteSHA384 != 0 {
-			return prf12(sha512.New384), crypto.SHA384
+			h := crypto.SHA384
+			return prf12(h, sha512.New384), h
 		}
-		return prf12(sha256.New), crypto.SHA256
+		h := crypto.SHA256
+		return prf12(h, sha256.New), h
 	default:
 		panic("unknown version")
 	}
 }
 
-func prfForVersion(version uint16, suite *cipherSuite) func(result, secret, label, seed []byte) {
+func prfForVersion(version uint16, suite *cipherSuite) func(result, secret, label, seed []byte) error {
 	prf, _ := prfAndHashForVersion(version, suite)
 	return prf
 }
 
 // masterFromPreMasterSecret generates the master secret from the pre-master
 // secret. See RFC 5246, Section 8.1.
-func masterFromPreMasterSecret(version uint16, suite *cipherSuite, preMasterSecret, clientRandom, serverRandom []byte) []byte {
+func masterFromPreMasterSecret(version uint16, suite *cipherSuite, preMasterSecret, clientRandom, serverRandom []byte) ([]byte, error) {
 	seed := make([]byte, 0, len(clientRandom)+len(serverRandom))
 	seed = append(seed, clientRandom...)
 	seed = append(seed, serverRandom...)
 
 	masterSecret := make([]byte, masterSecretLength)
-	prfForVersion(version, suite)(masterSecret, preMasterSecret, masterSecretLabel, seed)
-	return masterSecret
+	if err := prfForVersion(version, suite)(masterSecret, preMasterSecret, masterSecretLabel, seed); err != nil {
+		return nil, err
+	}
+	return masterSecret, nil
 }
 
 // extMasterFromPreMasterSecret generates the extended master secret from the
 // pre-master secret. See RFC 7627.
-func extMasterFromPreMasterSecret(version uint16, suite *cipherSuite, preMasterSecret, transcript []byte) []byte {
+func extMasterFromPreMasterSecret(version uint16, suite *cipherSuite, preMasterSecret, transcript []byte) ([]byte, error) {
 	masterSecret := make([]byte, masterSecretLength)
-	prfForVersion(version, suite)(masterSecret, preMasterSecret, extendedMasterSecretLabel, transcript)
-	return masterSecret
+	if err := prfForVersion(version, suite)(masterSecret, preMasterSecret, extendedMasterSecretLabel, transcript); err != nil {
+		return nil, err
+	}
+	return masterSecret, nil
 }
 
 // keysFromMasterSecret generates the connection keys from the master
 // secret, given the lengths of the MAC key, cipher key and IV, as defined in
 // RFC 2246, Section 6.3.
-func keysFromMasterSecret(version uint16, suite *cipherSuite, masterSecret, clientRandom, serverRandom []byte, macLen, keyLen, ivLen int) (clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV []byte) {
+func keysFromMasterSecret(version uint16, suite *cipherSuite, masterSecret, clientRandom, serverRandom []byte, macLen, keyLen, ivLen int) (clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV []byte, err error) {
 	seed := make([]byte, 0, len(serverRandom)+len(clientRandom))
 	seed = append(seed, serverRandom...)
 	seed = append(seed, clientRandom...)
 
 	n := 2*macLen + 2*keyLen + 2*ivLen
 	keyMaterial := make([]byte, n)
-	prfForVersion(version, suite)(keyMaterial, masterSecret, keyExpansionLabel, seed)
+	if err = prfForVersion(version, suite)(keyMaterial, masterSecret, keyExpansionLabel, seed); err != nil {
+		return
+	}
 	clientMAC = keyMaterial[:macLen]
 	keyMaterial = keyMaterial[macLen:]
 	serverMAC = keyMaterial[:macLen]
@@ -177,7 +200,7 @@ type finishedHash struct {
 	buffer []byte
 
 	version uint16
-	prf     func(result, secret, label, seed []byte)
+	prf     func(result, secret, label, seed []byte) error
 }
 
 func (h *finishedHash) Write(msg []byte) (n int, err error) {
@@ -208,18 +231,22 @@ func (h finishedHash) Sum() []byte {
 
 // clientSum returns the contents of the verify_data member of a client's
 // Finished message.
-func (h finishedHash) clientSum(masterSecret []byte) []byte {
+func (h finishedHash) clientSum(masterSecret []byte) ([]byte, error) {
 	out := make([]byte, finishedVerifyLength)
-	h.prf(out, masterSecret, clientFinishedLabel, h.Sum())
-	return out
+	if err := h.prf(out, masterSecret, clientFinishedLabel, h.Sum()); err != nil {
+		return nil, err
+	}
+	return out, nil
 }
 
 // serverSum returns the contents of the verify_data member of a server's
 // Finished message.
-func (h finishedHash) serverSum(masterSecret []byte) []byte {
+func (h finishedHash) serverSum(masterSecret []byte) ([]byte, error) {
 	out := make([]byte, finishedVerifyLength)
-	h.prf(out, masterSecret, serverFinishedLabel, h.Sum())
-	return out
+	if err := h.prf(out, masterSecret, serverFinishedLabel, h.Sum()); err != nil {
+		return nil, err
+	}
+	return out, nil
 }
 
 // hashForClientCertificate returns the handshake messages so far, pre-hashed if
@@ -293,7 +320,11 @@ func ekmFromMasterSecret(version uint16, suite *cipherSuite, masterSecret, clien
 		}
 
 		keyMaterial := make([]byte, length)
-		prfForVersion(version, suite)(keyMaterial, masterSecret, []byte(label), seed)
+		if err := prfForVersion(version, suite)(keyMaterial, masterSecret, []byte(label), seed); err != nil {
+			// Could happen if the seed is too large. The Go implementation doesn't limit the seed size,
+			// as RFC 5705 doesn't specify a limit, but stock OpenSSL restrict it to 1024 and CNG to 256.
+			return nil, err
+		}
 		return keyMaterial, nil
 	}
 }
diff --git a/src/crypto/tls/prf_test.go b/src/crypto/tls/prf_test.go
index 8233985a62bd22..f46d4636557714 100644
--- a/src/crypto/tls/prf_test.go
+++ b/src/crypto/tls/prf_test.go
@@ -51,13 +51,21 @@ func TestKeysFromPreMasterSecret(t *testing.T) {
 		clientRandom, _ := hex.DecodeString(test.clientRandom)
 		serverRandom, _ := hex.DecodeString(test.serverRandom)
 
-		masterSecret := masterFromPreMasterSecret(test.version, test.suite, in, clientRandom, serverRandom)
+		masterSecret, err := masterFromPreMasterSecret(test.version, test.suite, in, clientRandom, serverRandom)
+		if err != nil {
+			t.Errorf("#%d: masterFromPreMasterSecret failed: %s", i, err)
+			continue
+		}
 		if s := hex.EncodeToString(masterSecret); s != test.masterSecret {
 			t.Errorf("#%d: bad master secret %s, want %s", i, s, test.masterSecret)
 			continue
 		}
 
-		clientMAC, serverMAC, clientKey, serverKey, _, _ := keysFromMasterSecret(test.version, test.suite, masterSecret, clientRandom, serverRandom, test.macLen, test.keyLen, 0)
+		clientMAC, serverMAC, clientKey, serverKey, _, _, err := keysFromMasterSecret(test.version, test.suite, masterSecret, clientRandom, serverRandom, test.macLen, test.keyLen, 0)
+		if err != nil {
+			t.Errorf("#%d: keysFromMasterSecret failed: %s", i, err)
+			continue
+		}
 		clientMACString := hex.EncodeToString(clientMAC)
 		serverMACString := hex.EncodeToString(serverMAC)
 		clientKeyString := hex.EncodeToString(clientKey)
diff --git a/src/crypto/x509/boring_test.go b/src/crypto/x509/boring_test.go
index 319ac61f49c994..1b2454dbaab264 100644
--- a/src/crypto/x509/boring_test.go
+++ b/src/crypto/x509/boring_test.go
@@ -26,6 +26,11 @@ const (
 	boringCertFIPSOK = 0x80
 )
 
+func init() {
+	// crypto/tls expects fipstls.Required() to be false.
+	fipstls.Abandon()
+}
+
 func boringRSAKey(t *testing.T, size int) *rsa.PrivateKey {
 	t.Helper()
 	k, err := rsa.GenerateKey(rand.Reader, size)
diff --git a/src/go/build/deps_test.go b/src/go/build/deps_test.go
index c6a2518f62ff3a..578b4d6f68504c 100644
--- a/src/go/build/deps_test.go
+++ b/src/go/build/deps_test.go
@@ -464,7 +464,9 @@ var depsRules = `
 	# CRYPTO is core crypto algorithms - no cgo, fmt, net.
 	FIPS,
 	crypto/internal/boring/sig,
+	crypto/internal/boring/fipstls,
 	crypto/internal/boring/syso,
+	encoding/binary,
 	golang.org/x/sys/cpu,
 	hash, embed
 	< crypto
@@ -475,6 +477,7 @@ var depsRules = `
 	crypto/cipher,
 	crypto/internal/boring/bcache
 	< crypto/internal/boring
+	< crypto/internal/backend
 	< crypto/boring;
 
 	crypto/internal/alias, math/rand/v2
@@ -512,6 +515,7 @@ var depsRules = `
 	# CRYPTO-MATH is core bignum-based crypto - no cgo, net; fmt now ok.
 	CRYPTO, FMT, math/big
 	< crypto/internal/boring/bbig
+	< crypto/internal/backend/bbig
 	< crypto/rand
 	< crypto/internal/mlkem768
 	< crypto/ed25519
diff --git a/src/hash/boring_test.go b/src/hash/boring_test.go
new file mode 100644
index 00000000000000..c90899062a9665
--- /dev/null
+++ b/src/hash/boring_test.go
@@ -0,0 +1,5 @@
+//go:build goexperiment.boringcrypto
+
+package hash_test
+
+const boringEnabled = true
diff --git a/src/hash/marshal_test.go b/src/hash/marshal_test.go
index 3091f7a67acede..fead8cc4bec73a 100644
--- a/src/hash/marshal_test.go
+++ b/src/hash/marshal_test.go
@@ -65,6 +65,11 @@ func TestMarshalHash(t *testing.T) {
 			}
 
 			h := tt.new()
+			if boringEnabled {
+				if _, ok := h.(encoding.BinaryMarshaler); !ok {
+					t.Skip("BinaryMarshaler not implemented")
+				}
+			}
 			h.Write(buf[:256])
 			sum := h.Sum(nil)
 
diff --git a/src/hash/notboring_test.go b/src/hash/notboring_test.go
new file mode 100644
index 00000000000000..79f8c22f2b7416
--- /dev/null
+++ b/src/hash/notboring_test.go
@@ -0,0 +1,5 @@
+//go:build !goexperiment.boringcrypto
+
+package hash_test
+
+const boringEnabled = false
diff --git a/src/net/smtp/smtp_test.go b/src/net/smtp/smtp_test.go
index 389eda9ad54b99..110d60beb0e70c 100644
--- a/src/net/smtp/smtp_test.go
+++ b/src/net/smtp/smtp_test.go
@@ -1136,40 +1136,60 @@ func sendMail(hostPort string) error {
 
 // localhostCert is a PEM-encoded TLS cert generated from src/crypto/tls:
 //
-//	go run generate_cert.go --rsa-bits 1024 --host 127.0.0.1,::1,example.com \
+//	Use a 2048-bits RSA key to make it FIPS-compliant.
+//	go run generate_cert.go --rsa-bits 2048 --host 127.0.0.1,::1,example.com \
 //		--ca --start-date "Jan 1 00:00:00 1970" --duration=1000000h
 var localhostCert = []byte(`
 -----BEGIN CERTIFICATE-----
-MIICFDCCAX2gAwIBAgIRAK0xjnaPuNDSreeXb+z+0u4wDQYJKoZIhvcNAQELBQAw
-EjEQMA4GA1UEChMHQWNtZSBDbzAgFw03MDAxMDEwMDAwMDBaGA8yMDg0MDEyOTE2
-MDAwMFowEjEQMA4GA1UEChMHQWNtZSBDbzCBnzANBgkqhkiG9w0BAQEFAAOBjQAw
-gYkCgYEA0nFbQQuOWsjbGtejcpWz153OlziZM4bVjJ9jYruNw5n2Ry6uYQAffhqa
-JOInCmmcVe2siJglsyH9aRh6vKiobBbIUXXUU1ABd56ebAzlt0LobLlx7pZEMy30
-LqIi9E6zmL3YvdGzpYlkFRnRrqwEtWYbGBf3znO250S56CCWH2UCAwEAAaNoMGYw
-DgYDVR0PAQH/BAQDAgKkMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1UdEwEB/wQF
-MAMBAf8wLgYDVR0RBCcwJYILZXhhbXBsZS5jb22HBH8AAAGHEAAAAAAAAAAAAAAA
-AAAAAAEwDQYJKoZIhvcNAQELBQADgYEAbZtDS2dVuBYvb+MnolWnCNqvw1w5Gtgi
-NmvQQPOMgM3m+oQSCPRTNGSg25e1Qbo7bgQDv8ZTnq8FgOJ/rbkyERw2JckkHpD4
-n4qcK27WkEDBtQFlPihIM8hLIuzWoi/9wygiElTy/tVL3y7fGCvY2/k1KBthtZGF
-tN8URjVmyEo=
+MIIDOTCCAiGgAwIBAgIQKhWw7zkzXjX78HaPlVbNrjANBgkqhkiG9w0BAQsFADAS
+MRAwDgYDVQQKEwdBY21lIENvMCAXDTcwMDEwMTAwMDAwMFoYDzIwODQwMTI5MTYw
+MDAwWjASMRAwDgYDVQQKEwdBY21lIENvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
+MIIBCgKCAQEAy1EYLA8IFvZyUPY+uI7KToneaQPvIzQiOeWlDnFnoanw6h3KpoVc
++yNbinK41WfXoSN/1kJ9gmGiFhJTPZ4rQ7DJsD7ethcpuz4uIimdWPohcBzwgbx4
+wjhUgfUsCO6m76fFqrhbkHMDiS2iUjg2gyMVQCrqi8EuBW16yFQdJqPU04p+2rYw
+eJ9lzdeSLR4yvx7p1JS8sS4DbSyrAUaJ9J1sH/gu0nSHNMo7WtIu9K8JmPeYR4X5
+5KLURBU9PmvoGW+5ss/xS6SnacHAD9FebNPQqGB/soBA9gdJIN+5KW0xcE38Zz5Q
+wAAUiU+VlWuZmge0sI8Ix8uIPIvGQSKN0wIDAQABo4GIMIGFMA4GA1UdDwEB/wQE
+AwICpDATBgNVHSUEDDAKBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud
+DgQWBBRNMP9Cr0yrXpMpsgEtDr8FPmUEazAuBgNVHREEJzAlggtleGFtcGxlLmNv
+bYcEfwAAAYcQAAAAAAAAAAAAAAAAAAAAATANBgkqhkiG9w0BAQsFAAOCAQEAF0/z
+KEnZrAsz4ov4fEvKY42EbKPm8s0pklPLmKVIh/iS7jTxxxvgDtOToiJ6IXY8Cfb3
+nG1i78YakoVPUL5Cfh5LKDefMoefk6575ur2+gSdzgNmKUnlVfOMfpflia/ugATZ
+5ORhpmKRKWzwXQ67S5XeVlZAehTsywQstsDu8WEVoSUnRSk1jZsCThOQfdlpox+K
+71rGPSTxB9yCHMzZsk4xyZlGLaC0vDSJ+Zb5gWvAcvkSnpREvmc3/9TaW/lbUed6
+uhO17lARcUhPCzkR5wAZCo/PihHMSXL8cqT4QdIux75OBxB/3EgLHL7KQw28A50g
+DogldK8zx1ZADmupUA==
 -----END CERTIFICATE-----`)
 
 // localhostKey is the private key for localhostCert.
 var localhostKey = []byte(testingKey(`
 -----BEGIN RSA TESTING KEY-----
-MIICXgIBAAKBgQDScVtBC45ayNsa16NylbPXnc6XOJkzhtWMn2Niu43DmfZHLq5h
-AB9+Gpok4icKaZxV7ayImCWzIf1pGHq8qKhsFshRddRTUAF3np5sDOW3QuhsuXHu
-lkQzLfQuoiL0TrOYvdi90bOliWQVGdGurAS1ZhsYF/fOc7bnRLnoIJYfZQIDAQAB
-AoGBAMst7OgpKyFV6c3JwyI/jWqxDySL3caU+RuTTBaodKAUx2ZEmNJIlx9eudLA
-kucHvoxsM/eRxlxkhdFxdBcwU6J+zqooTnhu/FE3jhrT1lPrbhfGhyKnUrB0KKMM
-VY3IQZyiehpxaeXAwoAou6TbWoTpl9t8ImAqAMY8hlULCUqlAkEA+9+Ry5FSYK/m
-542LujIcCaIGoG1/Te6Sxr3hsPagKC2rH20rDLqXwEedSFOpSS0vpzlPAzy/6Rbb
-PHTJUhNdwwJBANXkA+TkMdbJI5do9/mn//U0LfrCR9NkcoYohxfKz8JuhgRQxzF2
-6jpo3q7CdTuuRixLWVfeJzcrAyNrVcBq87cCQFkTCtOMNC7fZnCTPUv+9q1tcJyB
-vNjJu3yvoEZeIeuzouX9TJE21/33FaeDdsXbRhQEj23cqR38qFHsF1qAYNMCQQDP
-QXLEiJoClkR2orAmqjPLVhR3t2oB3INcnEjLNSq8LHyQEfXyaFfu4U9l5+fRPL2i
-jiC0k/9L5dHUsF0XZothAkEA23ddgRs+Id/HxtojqqUT27B8MT/IGNrYsp4DvS/c
-qgkeluku4GjxRlDMBuXk94xOBEinUs+p/hwP1Alll80Tpg==
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDLURgsDwgW9nJQ
+9j64jspOid5pA+8jNCI55aUOcWehqfDqHcqmhVz7I1uKcrjVZ9ehI3/WQn2CYaIW
+ElM9nitDsMmwPt62Fym7Pi4iKZ1Y+iFwHPCBvHjCOFSB9SwI7qbvp8WquFuQcwOJ
+LaJSODaDIxVAKuqLwS4FbXrIVB0mo9TTin7atjB4n2XN15ItHjK/HunUlLyxLgNt
+LKsBRon0nWwf+C7SdIc0yjta0i70rwmY95hHhfnkotREFT0+a+gZb7myz/FLpKdp
+wcAP0V5s09CoYH+ygED2B0kg37kpbTFwTfxnPlDAABSJT5WVa5maB7SwjwjHy4g8
+i8ZBIo3TAgMBAAECggEAc7dv/oN/ozIY1iOQhxId6p1lTHfEv1CIulMNoi7BQK2s
+RFM4Z5Y32WfCTgYFVNCJVVkTBStKq85Npio/3i4Libcw03K05wY/5iX5s8/jkiSq
+q1iNOgm+4SuWTXDw4xSRRo1CX2wWERykwoqKfCkqPXDWQ3Mpkukb/FLXMvVMshRA
+9v9L6MyrCnsFHl8q2J6hcC+RQJ0pb5I4NF6KhMxABWxxxlDO0zYLA0wfhEn8nj/l
+J37QLHmsA7pzxo+NqDTPgpfBuuTbRVGMkC+fPCXYinbubBeURFO2j2yBlseK+Vbd
+sEffiAnPr4ocCz0k0tHAMMY7hKHup2HWuJGFu0IhAQKBgQDkKFEEcYWNx5Ybl1LV
+qr2qIYofpFL+Gu5MWSZxzZbE8u9v0tTsp8SRhXkgjeHY6qjBUBnLgklOKwSigQAm
+j9de44cXjnUIArzeAHsH3fzpYrLfsvBla6wQyr34D0chVCZ0cX/s/zXkSN4PcEkA
+GGfKAENrGskDyc4uq1sIactu8wKBgQDkIL/XT7ysvsaxA+SfIs2CHgb8GNKgtoI1
+QyR0+MfeJGCLwI9qcLbVzXda34qrzQw3YLIm2VHqhzJ4zb0gnyJ4adPZYwpLTgiU
+jVksBVIwBTfbxYvF2+07poCSobCFKLGQnAujhDDIGDAUKQXQmFcqUNWw0QHfQzkS
+xs36H27doQKBgQCjM8+YLRgKbc0LGXhwTHz1GJ6zuZiAGYWB6XddimEhqmDpjVcv
+nWY3bdFSHwuBXYGvHfwFncGP/6eGEl6oNtYpEvoMOKOwQj0VVCStYPZLf4VSDK52
+7ckcDdpLeao4xffn7VRDk97Z1+G4C2q8fbioPv36vCMz6YPp0DsCzqJtTwKBgCUN
+4LtDW10fu7xC6p6ik4jgAbhu+79ZBbtLBZ/uTOCbPgdVJrZeSoRd1FYxWx/etW5F
+SYqf3/tdLGiM2nxy/LFcVynHOYPTz/b5IpPQ5XGhV1peMv7XYyg+OkIW+0oVuwnH
+HujXbukBbMXJiAVCyV25NYx71ncCP0H6grhu5J4hAoGAUaketZWHD/ks9JCoPtfy
+pNnXqrIvTp1cSGJpVUQT/DUqAjevyZ5Q8PFPf09BZ6uYlXtCqsp7pA/fqNdlJRPR
+tHRjpZ5XauBiFdpRNH4tJBTiWWhyuWhkWn369Az7HP3CIlJLeq2FlKCvMClcO4op
+Qc9LHT7jqtcy+LqAVBpsJ/o=
 -----END RSA TESTING KEY-----`))
 
 func testingKey(s string) string { return strings.ReplaceAll(s, "TESTING KEY", "PRIVATE KEY") }
diff --git a/src/runtime/runtime_boring.go b/src/runtime/runtime_boring.go
index 5a98b20253181c..9042f2c2795e19 100644
--- a/src/runtime/runtime_boring.go
+++ b/src/runtime/runtime_boring.go
@@ -17,3 +17,8 @@ func boring_runtime_arg0() string {
 
 //go:linkname fipstls_runtime_arg0 crypto/internal/boring/fipstls.runtime_arg0
 func fipstls_runtime_arg0() string { return boring_runtime_arg0() }
+
+//go:linkname crypto_backend_runtime_arg0 crypto/internal/backend.runtime_arg0
+func crypto_backend_runtime_arg0() string {
+	return boring_runtime_arg0()
+}
