From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Tue, 19 Jul 2022 15:58:02 +0200
Subject: [PATCH] Add CNG crypto backend

---
 src/cmd/api/boring_test.go                    |   2 +-
 src/cmd/go/go_boring_test.go                  |   2 +-
 src/crypto/boring/boring.go                   |   2 +-
 src/crypto/ecdsa/badlinkname.go               |  17 ++
 src/crypto/ecdsa/boring.go                    |   2 +-
 src/crypto/ecdsa/notboring.go                 |   2 +-
 src/crypto/internal/backend/backend_test.go   |   4 +-
 src/crypto/internal/backend/bbig/big.go       |   2 +-
 src/crypto/internal/backend/bbig/big_cng.go   |  12 +
 src/crypto/internal/backend/cng_windows.go    | 277 ++++++++++++++++++
 src/crypto/internal/backend/common.go         |  13 +-
 src/crypto/rsa/boring.go                      |   2 +-
 src/crypto/rsa/boring_test.go                 |   2 +-
 src/crypto/rsa/fips.go                        |   2 +-
 src/crypto/rsa/notboring.go                   |   2 +-
 src/crypto/rsa/pss_test.go                    |   2 +-
 src/crypto/tls/fipsonly/fipsonly.go           |   2 +-
 src/crypto/tls/fipsonly/fipsonly_test.go      |   2 +-
 src/go.mod                                    |   1 +
 src/go.sum                                    |   2 +
 src/go/build/deps_test.go                     |   5 +
 src/go/build/vendor_test.go                   |   1 +
 src/hash/boring_test.go                       |   2 +-
 src/hash/example_test.go                      |   2 +
 src/hash/notboring_test.go                    |   2 +-
 .../goexperiment/exp_cngcrypto_off.go         |   9 +
 src/internal/goexperiment/exp_cngcrypto_on.go |   9 +
 src/internal/goexperiment/flags.go            |   1 +
 28 files changed, 364 insertions(+), 19 deletions(-)
 create mode 100644 src/crypto/ecdsa/badlinkname.go
 create mode 100644 src/crypto/internal/backend/bbig/big_cng.go
 create mode 100644 src/crypto/internal/backend/cng_windows.go
 create mode 100644 src/internal/goexperiment/exp_cngcrypto_off.go
 create mode 100644 src/internal/goexperiment/exp_cngcrypto_on.go

diff --git a/src/cmd/api/boring_test.go b/src/cmd/api/boring_test.go
index 0e9aceeb832d3b..aecf81b09c8ad3 100644
--- a/src/cmd/api/boring_test.go
+++ b/src/cmd/api/boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package main
 
diff --git a/src/cmd/go/go_boring_test.go b/src/cmd/go/go_boring_test.go
index 5376227f74cfaa..492ccf79d66b45 100644
--- a/src/cmd/go/go_boring_test.go
+++ b/src/cmd/go/go_boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package main_test
 
diff --git a/src/crypto/boring/boring.go b/src/crypto/boring/boring.go
index 7b04f14ebdd618..8bdafb72f2c51a 100644
--- a/src/crypto/boring/boring.go
+++ b/src/crypto/boring/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 // Package boring exposes functions that are only available when building with
 // Go+BoringCrypto. This package is available on all targets as long as the
diff --git a/src/crypto/ecdsa/badlinkname.go b/src/crypto/ecdsa/badlinkname.go
new file mode 100644
index 00000000000000..0d00b7bb3a7fc8
--- /dev/null
+++ b/src/crypto/ecdsa/badlinkname.go
@@ -0,0 +1,17 @@
+// Copyright 2024 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package ecdsa
+
+import _ "unsafe"
+
+// The symbols below are pulled by the CNG backend in the Microsoft Go compiler.
+// We provide a push linkname here, to keep them accessible with pull linknames.
+
+//go:linkname encodeSignature
+//go:linkname parseSignature
+
+// This supplements other linknames that are already added by
+// https://github.com/golang/go/commit/41aab30bd260297ad8ddad47e98fdf8390a9a67e
+// See that commit for more information.
diff --git a/src/crypto/ecdsa/boring.go b/src/crypto/ecdsa/boring.go
index 602cb894e20d39..bf9e77e06599f0 100644
--- a/src/crypto/ecdsa/boring.go
+++ b/src/crypto/ecdsa/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package ecdsa
 
diff --git a/src/crypto/ecdsa/notboring.go b/src/crypto/ecdsa/notboring.go
index 3cc16ecab567a0..dbbc6e3897e153 100644
--- a/src/crypto/ecdsa/notboring.go
+++ b/src/crypto/ecdsa/notboring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto && !goexperiment.opensslcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto && !goexperiment.cngcrypto
 
 package ecdsa
 
diff --git a/src/crypto/internal/backend/backend_test.go b/src/crypto/internal/backend/backend_test.go
index c2c06d3bff8c74..837cff477e257e 100644
--- a/src/crypto/internal/backend/backend_test.go
+++ b/src/crypto/internal/backend/backend_test.go
@@ -4,9 +4,7 @@
 
 package backend
 
-import (
-	"testing"
-)
+import "testing"
 
 // Test that Unreachable panics.
 func TestUnreachable(t *testing.T) {
diff --git a/src/crypto/internal/backend/bbig/big.go b/src/crypto/internal/backend/bbig/big.go
index 51bc3c68048d51..15f9833c9fcd20 100644
--- a/src/crypto/internal/backend/bbig/big.go
+++ b/src/crypto/internal/backend/bbig/big.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto && !goexperiment.opensslcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto && !goexperiment.cngcrypto
 
 package bbig
 
diff --git a/src/crypto/internal/backend/bbig/big_cng.go b/src/crypto/internal/backend/bbig/big_cng.go
new file mode 100644
index 00000000000000..92623031fd87d0
--- /dev/null
+++ b/src/crypto/internal/backend/bbig/big_cng.go
@@ -0,0 +1,12 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.cngcrypto
+
+package bbig
+
+import "github.com/microsoft/go-crypto-winnative/cng/bbig"
+
+var Enc = bbig.Enc
+var Dec = bbig.Dec
diff --git a/src/crypto/internal/backend/cng_windows.go b/src/crypto/internal/backend/cng_windows.go
new file mode 100644
index 00000000000000..d54425754213fb
--- /dev/null
+++ b/src/crypto/internal/backend/cng_windows.go
@@ -0,0 +1,277 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.cngcrypto && windows
+
+// Package cng provides access to CNGCrypto implementation functions.
+// Check the variable Enabled to find out whether CNGCrypto is available.
+// If CNGCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"crypto/internal/backend/fips140"
+	"crypto/internal/boring/sig"
+	"hash"
+	"io"
+	_ "unsafe"
+
+	"github.com/microsoft/go-crypto-winnative/cng"
+)
+
+// Enabled controls whether FIPS crypto is enabled.
+const Enabled = true
+
+func init() {
+	if fips140.Enabled() {
+		enabled, err := cng.FIPS()
+		if err != nil {
+			panic("cngcrypto: unknown FIPS mode: " + err.Error())
+		}
+		if !enabled {
+			panic("cngcrypto: not in FIPS mode")
+		}
+	}
+	sig.BoringCrypto()
+}
+
+const RandReader = cng.RandReader
+
+func SupportsHash(h crypto.Hash) bool {
+	return cng.SupportsHash(h)
+}
+
+func NewMD5() hash.Hash    { return cng.NewMD5() }
+func NewSHA1() hash.Hash   { return cng.NewSHA1() }
+func NewSHA224() hash.Hash { panic("cngcrypto: not available") }
+func NewSHA256() hash.Hash { return cng.NewSHA256() }
+func NewSHA384() hash.Hash { return cng.NewSHA384() }
+func NewSHA512() hash.Hash { return cng.NewSHA512() }
+
+func MD5(p []byte) (sum [16]byte)    { return cng.MD5(p) }
+func SHA1(p []byte) (sum [20]byte)   { return cng.SHA1(p) }
+func SHA224(p []byte) (sum [28]byte) { panic("cngcrypto: not available") }
+func SHA256(p []byte) (sum [32]byte) { return cng.SHA256(p) }
+func SHA384(p []byte) (sum [48]byte) { return cng.SHA384(p) }
+func SHA512(p []byte) (sum [64]byte) { return cng.SHA512(p) }
+
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash {
+	return cng.NewHMAC(h, key)
+}
+
+func NewAESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewAESCipher(key)
+}
+
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error) {
+	return cng.NewGCMTLS(c)
+}
+
+func NewGCMTLS13(c cipher.Block) (cipher.AEAD, error) {
+	return cng.NewGCMTLS13(c)
+}
+
+type PublicKeyECDSA = cng.PublicKeyECDSA
+type PrivateKeyECDSA = cng.PrivateKeyECDSA
+
+func GenerateKeyECDSA(curve string) (X, Y, D cng.BigInt, err error) {
+	return cng.GenerateKeyECDSA(curve)
+}
+
+func NewPrivateKeyECDSA(curve string, X, Y, D cng.BigInt) (*cng.PrivateKeyECDSA, error) {
+	return cng.NewPrivateKeyECDSA(curve, X, Y, D)
+}
+
+func NewPublicKeyECDSA(curve string, X, Y cng.BigInt) (*cng.PublicKeyECDSA, error) {
+	return cng.NewPublicKeyECDSA(curve, X, Y)
+}
+
+//go:linkname encodeSignature crypto/ecdsa.encodeSignature
+func encodeSignature(r, s []byte) ([]byte, error)
+
+//go:linkname parseSignature crypto/ecdsa.parseSignature
+func parseSignature(sig []byte) (r, s []byte, err error)
+
+func SignMarshalECDSA(priv *cng.PrivateKeyECDSA, hash []byte) ([]byte, error) {
+	r, s, err := cng.SignECDSA(priv, hash)
+	if err != nil {
+		return nil, err
+	}
+	return encodeSignature(r, s)
+}
+
+func VerifyECDSA(pub *cng.PublicKeyECDSA, hash []byte, sig []byte) bool {
+	rBytes, sBytes, err := parseSignature(sig)
+	if err != nil {
+		return false
+	}
+	return cng.VerifyECDSA(pub, hash, cng.BigInt(rBytes), cng.BigInt(sBytes))
+}
+
+func SignECDSA(priv *cng.PrivateKeyECDSA, hash []byte) (r, s cng.BigInt, err error) {
+	return cng.SignECDSA(priv, hash)
+}
+
+func VerifyECDSARaw(pub *cng.PublicKeyECDSA, hash []byte, r, s cng.BigInt) bool {
+	return cng.VerifyECDSA(pub, hash, r, s)
+}
+
+type PublicKeyRSA = cng.PublicKeyRSA
+type PrivateKeyRSA = cng.PrivateKeyRSA
+
+func DecryptRSAOAEP(h, mgfHash hash.Hash, priv *cng.PrivateKeyRSA, ciphertext, label []byte) ([]byte, error) {
+	return cng.DecryptRSAOAEP(h, priv, ciphertext, label)
+}
+
+func DecryptRSAPKCS1(priv *cng.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return cng.DecryptRSAPKCS1(priv, ciphertext)
+}
+
+func DecryptRSANoPadding(priv *cng.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return cng.DecryptRSANoPadding(priv, ciphertext)
+}
+
+func EncryptRSAOAEP(h, mgfHash hash.Hash, pub *cng.PublicKeyRSA, msg, label []byte) ([]byte, error) {
+	return cng.EncryptRSAOAEP(h, pub, msg, label)
+}
+
+func EncryptRSAPKCS1(pub *cng.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return cng.EncryptRSAPKCS1(pub, msg)
+}
+
+func EncryptRSANoPadding(pub *cng.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return cng.EncryptRSANoPadding(pub, msg)
+}
+
+func GenerateKeyRSA(bits int) (N, E, D, P, Q, Dp, Dq, Qinv cng.BigInt, err error) {
+	return cng.GenerateKeyRSA(bits)
+}
+
+func NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv cng.BigInt) (*cng.PrivateKeyRSA, error) {
+	return cng.NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv)
+}
+
+func NewPublicKeyRSA(N, E cng.BigInt) (*cng.PublicKeyRSA, error) {
+	return cng.NewPublicKeyRSA(N, E)
+}
+
+func SignRSAPKCS1v15(priv *cng.PrivateKeyRSA, h crypto.Hash, hashed []byte) ([]byte, error) {
+	return cng.SignRSAPKCS1v15(priv, h, hashed)
+}
+
+func SignRSAPSS(priv *cng.PrivateKeyRSA, h crypto.Hash, hashed []byte, saltLen int) ([]byte, error) {
+	return cng.SignRSAPSS(priv, h, hashed, saltLen)
+}
+
+func VerifyRSAPKCS1v15(pub *cng.PublicKeyRSA, h crypto.Hash, hashed, sig []byte) error {
+	return cng.VerifyRSAPKCS1v15(pub, h, hashed, sig)
+}
+
+func VerifyRSAPSS(pub *cng.PublicKeyRSA, h crypto.Hash, hashed, sig []byte, saltLen int) error {
+	return cng.VerifyRSAPSS(pub, h, hashed, sig, saltLen)
+}
+
+type PrivateKeyECDH = cng.PrivateKeyECDH
+type PublicKeyECDH = cng.PublicKeyECDH
+
+func ECDH(priv *cng.PrivateKeyECDH, pub *cng.PublicKeyECDH) ([]byte, error) {
+	return cng.ECDH(priv, pub)
+}
+
+func GenerateKeyECDH(curve string) (*cng.PrivateKeyECDH, []byte, error) {
+	return cng.GenerateKeyECDH(curve)
+}
+
+func NewPrivateKeyECDH(curve string, bytes []byte) (*cng.PrivateKeyECDH, error) {
+	return cng.NewPrivateKeyECDH(curve, bytes)
+}
+
+func NewPublicKeyECDH(curve string, bytes []byte) (*cng.PublicKeyECDH, error) {
+	return cng.NewPublicKeyECDH(curve, bytes)
+}
+
+func SupportsHKDF() bool {
+	return cng.SupportsHKDF()
+}
+
+func ExpandHKDF(h func() hash.Hash, pseudorandomKey, info []byte) (io.Reader, error) {
+	return cng.ExpandHKDF(h, pseudorandomKey, info)
+}
+
+func ExtractHKDF(h func() hash.Hash, secret, salt []byte) ([]byte, error) {
+	return cng.ExtractHKDF(h, secret, salt)
+}
+
+func SupportsTLS1PRF() bool {
+	return true
+}
+
+func TLS1PRF(h func() hash.Hash, secret []byte, label string, seed []byte, keyLen int) []byte {
+	result := make([]byte, keyLen)
+	if err := cng.TLS1PRF(result, secret, []byte(label), seed, h); err != nil {
+		panic(err)
+	}
+	return result
+}
+
+func SupportsDESCipher() bool {
+	return true
+}
+
+func SupportsTripleDESCipher() bool {
+	return true
+}
+
+func NewDESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewDESCipher(key)
+}
+
+func NewTripleDESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewTripleDESCipher(key)
+}
+
+func SupportsRC4() bool { return true }
+
+type RC4Cipher = cng.RC4Cipher
+
+func NewRC4Cipher(key []byte) (*RC4Cipher, error) { return cng.NewRC4Cipher(key) }
+
+func SupportsEd25519() bool { return false }
+
+type PublicKeyEd25519 struct{}
+
+func (k *PublicKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+type PrivateKeyEd25519 struct{}
+
+func (k *PrivateKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func GenerateKeyEd25519() (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25119(priv []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPublicKeyEd25119(pub []byte) (*PublicKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25519FromSeed(seed []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func SignEd25519(priv *PrivateKeyEd25519, message []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func VerifyEd25519(pub *PublicKeyEd25519, message, sig []byte) error {
+	panic("cryptobackend: not available")
+}
diff --git a/src/crypto/internal/backend/common.go b/src/crypto/internal/backend/common.go
index 2bb24890cea757..d682957b9f1852 100644
--- a/src/crypto/internal/backend/common.go
+++ b/src/crypto/internal/backend/common.go
@@ -48,7 +48,11 @@ func hasSuffix(s, t string) bool {
 // UnreachableExceptTests marks code that should be unreachable
 // when backend is in use. It panics.
 func UnreachableExceptTests() {
-	if Enabled {
+	// runtime_arg0 is not supported on windows.
+	// We are going through the same code patch on linux,
+	// so if we are unintentionally calling an 'unreachable' function,
+	// we will catch it there.
+	if Enabled && !goexperiment.CNGCrypto {
 		name := runtime_arg0()
 		// If ran on Windows we'd need to allow _test.exe and .test.exe as well.
 		if !hasSuffix(name, "_test") && !hasSuffix(name, ".test") {
@@ -70,3 +74,10 @@ func IsRSAKeySupported(primes int) bool {
 	// Given the above reasons, we only support 2-prime RSA keys.
 	return primes == 2
 }
+
+func IsSaltSupported(salt int) bool {
+	if goexperiment.CNGCrypto {
+		return salt != 0 // rsa.PSSSaltLengthAuto
+	}
+	return true
+}
diff --git a/src/crypto/rsa/boring.go b/src/crypto/rsa/boring.go
index 220f8c05c3d94b..dd20b4af2e0472 100644
--- a/src/crypto/rsa/boring.go
+++ b/src/crypto/rsa/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package rsa
 
diff --git a/src/crypto/rsa/boring_test.go b/src/crypto/rsa/boring_test.go
index 0094648f065f8d..ad6c64172c8f32 100644
--- a/src/crypto/rsa/boring_test.go
+++ b/src/crypto/rsa/boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 // Note: Can run these tests against the non-BoringCrypto
 // version of the code by using "CGO_ENABLED=0 go test".
diff --git a/src/crypto/rsa/fips.go b/src/crypto/rsa/fips.go
index 3f724f412e7979..8fcd5dfe394752 100644
--- a/src/crypto/rsa/fips.go
+++ b/src/crypto/rsa/fips.go
@@ -130,7 +130,7 @@ func VerifyPSS(pub *PublicKey, hash crypto.Hash, digest []byte, sig []byte, opts
 		return errors.New("crypto/rsa: use of hash functions other than SHA-2 or SHA-3 is not allowed in FIPS 140-only mode")
 	}
 
-	if boring.Enabled {
+	if boring.Enabled && boring.IsSaltSupported(opts.saltLength()) {
 		bkey, err := boringPublicKey(pub)
 		if err != nil {
 			return err
diff --git a/src/crypto/rsa/notboring.go b/src/crypto/rsa/notboring.go
index 933ac569e034a8..0f152b210fdd84 100644
--- a/src/crypto/rsa/notboring.go
+++ b/src/crypto/rsa/notboring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto && !goexperiment.opensslcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto && !goexperiment.cngcrypto
 
 package rsa
 
diff --git a/src/crypto/rsa/pss_test.go b/src/crypto/rsa/pss_test.go
index e03f4ab06603c6..a9928c0c7d8259 100644
--- a/src/crypto/rsa/pss_test.go
+++ b/src/crypto/rsa/pss_test.go
@@ -241,7 +241,7 @@ func fromHex(hexStr string) []byte {
 
 func TestInvalidPSSSaltLength(t *testing.T) {
 	t.Setenv("GODEBUG", "rsa1024min=0")
-	key, err := GenerateKey(rand.Reader, 245)
+	key, err := GenerateKey(rand.Reader, 512)
 	if err != nil {
 		t.Fatal(err)
 	}
diff --git a/src/crypto/tls/fipsonly/fipsonly.go b/src/crypto/tls/fipsonly/fipsonly.go
index 03229f144761b2..045c9fbd4ece9e 100644
--- a/src/crypto/tls/fipsonly/fipsonly.go
+++ b/src/crypto/tls/fipsonly/fipsonly.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 // Package fipsonly restricts all TLS configuration to FIPS-approved settings.
 //
diff --git a/src/crypto/tls/fipsonly/fipsonly_test.go b/src/crypto/tls/fipsonly/fipsonly_test.go
index 93d807d5305e59..a817059e5eb978 100644
--- a/src/crypto/tls/fipsonly/fipsonly_test.go
+++ b/src/crypto/tls/fipsonly/fipsonly_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto || goexperiment.opensslcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package fipsonly
 
diff --git a/src/go.mod b/src/go.mod
index 501573834a2952..ab0e59a8d84a4d 100644
--- a/src/go.mod
+++ b/src/go.mod
@@ -4,6 +4,7 @@ go 1.24
 
 require (
 	github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3
+	github.com/microsoft/go-crypto-winnative v0.0.0-20241031174928-19f07bc6df3d
 	golang.org/x/crypto v0.29.0
 	golang.org/x/net v0.31.0
 )
diff --git a/src/go.sum b/src/go.sum
index fd9696fcb03d3b..9b5c0a577053c5 100644
--- a/src/go.sum
+++ b/src/go.sum
@@ -1,5 +1,7 @@
 github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3 h1:5QU8ZbOJ8pUBEhxIOm6+teyQMgeBFu3Gos5ue7Rvlgg=
 github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3/go.mod h1:OYUBsoxLpFu8OFyhZHxfpN8lgcsw8JhTC3BQK7+XUc0=
+github.com/microsoft/go-crypto-winnative v0.0.0-20241031174928-19f07bc6df3d h1:UKPx/2ug3daetm1rPOKyEHovWbh3hekPK8p1wygTcOI=
+github.com/microsoft/go-crypto-winnative v0.0.0-20241031174928-19f07bc6df3d/go.mod h1:JkxQeL8dGcyCuKjn1Etz4NmQrOMImMy4BA9hptEfVFA=
 golang.org/x/crypto v0.29.0 h1:L5SG1JTTXupVV3n6sUqMTeWbjAyfPwoda2DLX8J8FrQ=
 golang.org/x/crypto v0.29.0/go.mod h1:+F4F4N5hv6v38hfeYwTdx20oUvLLc+QfrE9Ax9HtgRg=
 golang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=
diff --git a/src/go/build/deps_test.go b/src/go/build/deps_test.go
index 6cd5e8abf1a456..862994e9e04286 100644
--- a/src/go/build/deps_test.go
+++ b/src/go/build/deps_test.go
@@ -514,6 +514,10 @@ var depsRules = `
 	crypto/cipher,
 	crypto/internal/boring/bcache,
 	crypto/internal/backend/fips140
+	< github.com/microsoft/go-crypto-winnative/internal/subtle
+	< github.com/microsoft/go-crypto-winnative/internal/sysdll
+	< github.com/microsoft/go-crypto-winnative/internal/bcrypt
+	< github.com/microsoft/go-crypto-winnative/cng
 	< github.com/golang-fips/openssl/v2/internal/subtle
 	< github.com/golang-fips/openssl/v2
 	< crypto/internal/boring
@@ -548,6 +552,7 @@ var depsRules = `
 
 	# CRYPTO-MATH is core bignum-based crypto - no cgo, net; fmt now ok.
 	CRYPTO, FMT, math/big
+	< github.com/microsoft/go-crypto-winnative/cng/bbig
 	< github.com/golang-fips/openssl/v2/bbig
 	< crypto/internal/boring/bbig
 	< crypto/internal/backend/bbig
diff --git a/src/go/build/vendor_test.go b/src/go/build/vendor_test.go
index 7c821ae4bc5727..1d0b9b20e9b1d4 100644
--- a/src/go/build/vendor_test.go
+++ b/src/go/build/vendor_test.go
@@ -23,6 +23,7 @@ var allowedPackagePrefixes = []string{
 	"github.com/ianlancetaylor/demangle",
 	"rsc.io/markdown",
 	"github.com/golang-fips/openssl",
+	"github.com/microsoft/go-crypto-winnative",
 }
 
 // Verify that the vendor directories contain only packages matching the list above.
diff --git a/src/hash/boring_test.go b/src/hash/boring_test.go
index 802c0f8b8987bf..99e1933f84b52c 100644
--- a/src/hash/boring_test.go
+++ b/src/hash/boring_test.go
@@ -1,4 +1,4 @@
-//go:build goexperiment.boringcrypto || goexperiment.opensslcrypto
+//go:build goexperiment.boringcrypto || goexperiment.opensslcrypto || goexperiment.cngcrypto
 
 package hash_test
 
diff --git a/src/hash/example_test.go b/src/hash/example_test.go
index f07b9aaa2c4898..2ff6c4827391c0 100644
--- a/src/hash/example_test.go
+++ b/src/hash/example_test.go
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
+//go:build !goexperiment.cngcrypto
+
 package hash_test
 
 import (
diff --git a/src/hash/notboring_test.go b/src/hash/notboring_test.go
index f3e8ed3e1cbf20..a85fc430cfa655 100644
--- a/src/hash/notboring_test.go
+++ b/src/hash/notboring_test.go
@@ -1,4 +1,4 @@
-//go:build !goexperiment.boringcrypto && !goexperiment.opensslcrypto
+//go:build !goexperiment.boringcrypto && !goexperiment.opensslcrypto && !goexperiment.cngcrypto
 
 package hash_test
 
diff --git a/src/internal/goexperiment/exp_cngcrypto_off.go b/src/internal/goexperiment/exp_cngcrypto_off.go
new file mode 100644
index 00000000000000..831460053281e2
--- /dev/null
+++ b/src/internal/goexperiment/exp_cngcrypto_off.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build !goexperiment.cngcrypto
+// +build !goexperiment.cngcrypto
+
+package goexperiment
+
+const CNGCrypto = false
+const CNGCryptoInt = 0
diff --git a/src/internal/goexperiment/exp_cngcrypto_on.go b/src/internal/goexperiment/exp_cngcrypto_on.go
new file mode 100644
index 00000000000000..99ee2542ca38a9
--- /dev/null
+++ b/src/internal/goexperiment/exp_cngcrypto_on.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build goexperiment.cngcrypto
+// +build goexperiment.cngcrypto
+
+package goexperiment
+
+const CNGCrypto = true
+const CNGCryptoInt = 1
diff --git a/src/internal/goexperiment/flags.go b/src/internal/goexperiment/flags.go
index 233a12ee542328..8c140f0dbed134 100644
--- a/src/internal/goexperiment/flags.go
+++ b/src/internal/goexperiment/flags.go
@@ -60,6 +60,7 @@ type Flags struct {
 	StaticLockRanking bool
 	BoringCrypto      bool
 	OpenSSLCrypto     bool
+	CNGCrypto         bool
 
 	// SystemCrypto enables the OpenSSL or CNG crypto experiment depending on
 	// which one is appropriate on the target GOOS.
