From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Tue, 19 Mar 2024 16:48:18 +0100
Subject: [PATCH] add support for logging used Windows APIs

---
 src/runtime/os_windows.go                    |   1 +
 src/runtime/syscall_windows.go               |   1 +
 src/runtime/syscalltrace_generate_windows.go |  50 +++++++
 src/runtime/syscalltrace_windows.go          | 131 +++++++++++++++++++
 src/runtime/syscalltrace_windows_test.go     |  81 ++++++++++++
 src/runtime/zsyscalltrace_windows.go         |  60 +++++++++
 6 files changed, 324 insertions(+)
 create mode 100644 src/runtime/syscalltrace_generate_windows.go
 create mode 100644 src/runtime/syscalltrace_windows.go
 create mode 100644 src/runtime/syscalltrace_windows_test.go
 create mode 100644 src/runtime/zsyscalltrace_windows.go

diff --git a/src/runtime/os_windows.go b/src/runtime/os_windows.go
index 7183e79f7df093..2b382202bf7e49 100644
--- a/src/runtime/os_windows.go
+++ b/src/runtime/os_windows.go
@@ -223,6 +223,7 @@ func windowsFindfunc(lib uintptr, name []byte) stdFunction {
 	if name[len(name)-1] != 0 {
 		throw("usage")
 	}
+	syscallTrace(lib, &name[0])
 	f := stdcall2(_GetProcAddress, lib, uintptr(unsafe.Pointer(&name[0])))
 	return stdFunction(unsafe.Pointer(f))
 }
diff --git a/src/runtime/syscall_windows.go b/src/runtime/syscall_windows.go
index 85b1b8c9024a73..384be25350726e 100644
--- a/src/runtime/syscall_windows.go
+++ b/src/runtime/syscall_windows.go
@@ -443,6 +443,7 @@ func syscall_loadlibrary(filename *uint16) (handle, err uintptr) {
 //
 //go:linkname syscall_getprocaddress syscall.getprocaddress
 func syscall_getprocaddress(handle uintptr, procname *byte) (outhandle, err uintptr) {
+	syscallTrace(handle, procname)
 	outhandle, _, err = syscall_SyscallN(uintptr(unsafe.Pointer(_GetProcAddress)), handle, uintptr(unsafe.Pointer(procname)))
 	KeepAlive(procname)
 	if outhandle != 0 {
diff --git a/src/runtime/syscalltrace_generate_windows.go b/src/runtime/syscalltrace_generate_windows.go
new file mode 100644
index 00000000000000..7205f1ef659305
--- /dev/null
+++ b/src/runtime/syscalltrace_generate_windows.go
@@ -0,0 +1,50 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build ignore
+
+package main
+
+import (
+	"bufio"
+	"bytes"
+	"flag"
+	"log"
+	"os"
+	"strings"
+)
+
+func main() {
+	output := flag.String("output", "", "output file name")
+	flag.Parse()
+	if *output == "" {
+		log.Fatal("output file name is required")
+	}
+	out, err := os.Create(*output)
+	if err != nil {
+		log.Fatal(err)
+	}
+	defer func() {
+		if err := out.Close(); err != nil {
+			log.Fatal(err)
+		}
+	}()
+	out.WriteString("// Code generated by syscalltrace_generate_windows.go. DO NOT EDIT.\n\n")
+	out.WriteString("package runtime\n\n")
+	out.WriteString("var staticSyscalls = [...]string{\n")
+	for _, file := range flag.Args() {
+		content, err := os.ReadFile(file + ".go")
+		if err != nil {
+			log.Fatal(err)
+		}
+		scanner := bufio.NewScanner(bytes.NewReader(content))
+		for scanner.Scan() {
+			if after, found := strings.CutPrefix(scanner.Text(), "//go:cgo_import_dynamic runtime._"); found {
+				name, _, _ := strings.Cut(after, " ")
+				out.WriteString("\t\"" + name + `\x00"` + ",\n")
+			}
+		}
+	}
+	out.WriteString("}\n")
+}
diff --git a/src/runtime/syscalltrace_windows.go b/src/runtime/syscalltrace_windows.go
new file mode 100644
index 00000000000000..81eba970d3831e
--- /dev/null
+++ b/src/runtime/syscalltrace_windows.go
@@ -0,0 +1,131 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:generate go run syscalltrace_generate_windows.go -output zsyscalltrace_windows.go os_windows syscalltrace_windows
+
+package runtime
+
+import "unsafe"
+
+//go:cgo_import_dynamic runtime._CreateFileW CreateFileW%7 "kernel32.dll"
+//go:cgo_import_dynamic runtime._GetEnvironmentVariableW GetEnvironmentVariableW%3 "kernel32.dll"
+//go:cgo_import_dynamic runtime._GetModuleFileNameA GetModuleFileNameA%3 "kernel32.dll"
+
+var (
+	_CreateFileW,
+	_GetEnvironmentVariableW,
+	_GetModuleFileNameA,
+	_ stdFunction
+)
+
+var (
+	syscallTraceFileHandle uintptr
+	currentProcessName     [_MAX_PATH]byte
+)
+
+// syscallTrace logs a syscall trace.
+// The trace is written as a comma-separated list of the process name,
+// module name, procedure name, and a newline character.
+// If the underlying file supports atomic writes, the trace is guaranteed
+// to be written atomically.
+// procName should be a pointer to a null-terminated string.
+func syscallTrace(modHandle uintptr, procName *byte) {
+	if syscallTraceFileHandle == _INVALID_HANDLE_VALUE {
+		return
+	}
+	if syscallTraceFileHandle == 0 {
+		// It is safe to call initSyscallTrace without locking
+		// because the first time syscallTrace is called is during
+		// runtime initialization, when there is only one goroutine.
+		if !initSyscallTrace() {
+			return
+		}
+	}
+	// We can't allocate memory here, as syscallTrace might be called
+	// before the memory allocator is initialized. Instead, we use a
+	// fixed-size buffer on the stack. The buffer is large enough to
+	// hold two commas, one end of line character, and MAX_PATH
+	// characters for each of line entry.
+	buf := make([]byte, _MAX_PATH*3+3)
+	n := findnull(&currentProcessName[0])
+	copy(buf, currentProcessName[:n])
+	buf[n] = ','
+	n += 1
+	// Use GetModuleFileNameA instead of GetModuleFileNameW to avoid
+	// having to allocate memory for the UTF-16 string.
+	n1 := stdcall3(_GetModuleFileNameA, modHandle, uintptr(unsafe.Pointer(&buf[n])), _MAX_PATH)
+	if n1 == 0 || n1 == _MAX_PATH {
+		// Failed or short buffer.
+		buf[n] = '?'
+		n += 1
+	} else {
+		n += int(n1)
+	}
+	buf[n] = ','
+	n += 1
+	procNameLength := findnull(procName)
+	if procNameLength > _MAX_PATH {
+		// Truncate long procedure names,
+		// we can't allocate memory to log the full name.
+		procNameLength = _MAX_PATH
+	}
+	copy(buf[n:], unsafe.Slice(procName, procNameLength))
+	n += procNameLength
+	buf[n] = '\n'
+	n += 1
+	write(syscallTraceFileHandle, unsafe.Pointer(&buf[0]), int32(n))
+}
+
+// initSyscallTrace initializes syscall tracing.
+func initSyscallTrace() bool {
+	// Get the name of the current process.
+	n := int(stdcall3(_GetModuleFileNameA, 0, uintptr(unsafe.Pointer(&currentProcessName[0])), uintptr(len(currentProcessName))))
+	if n == 0 || n == len(currentProcessName) {
+		// Failed or short buffer.
+		currentProcessName[0] = '?'
+	}
+	// Check if the MS_GO_SYSCALL_TRACE environment variable is set,
+	// and if so, use it as the trace file.
+	envName := [...]uint16{'M', 'S', '_', 'G', 'O', '_', 'S', 'Y', 'S', 'C', 'A', 'L', 'L', '_', 'T', 'R', 'A', 'C', 'E', 0}
+	var file [_MAX_PATH + 1]uint16
+	if stdcall3(_GetEnvironmentVariableW, uintptr(unsafe.Pointer(&envName[0])), uintptr(unsafe.Pointer(&file[0])), uintptr(len(file))) == 0 {
+		// Disable syscall tracing.
+		syscallTraceFileHandle = _INVALID_HANDLE_VALUE
+		return false
+	}
+	const (
+		FILE_APPEND_DATA      = 0x00000004
+		FILE_SHARE_READ       = 0x00000001
+		FILE_SHARE_WRITE      = 0x00000002
+		FILE_SHARE_DELETE     = 0x00000004
+		OPEN_ALWAYS           = 4
+		FILE_ATTRIBUTE_NORMAL = 0x80
+	)
+	// Create the file with FILE_APPEND_DATA access to ensure that
+	// writes are atomic.
+	syscallTraceFileHandle = stdcall7(_CreateFileW, uintptr(unsafe.Pointer(&file[0])), FILE_APPEND_DATA, FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0)
+	if syscallTraceFileHandle == _INVALID_HANDLE_VALUE {
+		println("runtime: CreateFileA failed; errno=", getlasterror())
+		throw("failed to create syscall trace file")
+	}
+	traceStaticDependencies()
+	return true
+}
+
+// traceStaticDependencies logs the static dependencies of the runtime.
+func traceStaticDependencies() {
+	k32 := windowsLoadSystemLib([]uint16{'k', 'e', 'r', 'n', 'e', 'l', '3', '2', 0})
+	if k32 == 0 {
+		throw("kernel32.dll not found")
+	}
+	// Some syscalls are dynamically imported by the Windows loader
+	// instead of dynamically loaded by the Go runtime. Reading the
+	// binary PE important table is too much work, even more considering
+	// that we can't allocate memory here. An easier approach is to hardcode
+	// the syscalls we know are statically imported. This list can be autogenerated
+	// and ensure that is always in sync by running a dedicated test.
+	for i := range staticSyscalls {
+		syscallTrace(k32, unsafe.StringData(staticSyscalls[i]))
+	}
+}
diff --git a/src/runtime/syscalltrace_windows_test.go b/src/runtime/syscalltrace_windows_test.go
new file mode 100644
index 00000000000000..d60355b79dd635
--- /dev/null
+++ b/src/runtime/syscalltrace_windows_test.go
@@ -0,0 +1,81 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package runtime_test
+
+import (
+	"internal/testenv"
+	"os"
+	"path/filepath"
+	"strings"
+	"testing"
+)
+
+func TestSyscalltrace_StaticUpToDate(t *testing.T) {
+	testenv.MustHaveGoBuild(t)
+
+	// This test checks that the staticSyscalls array in runtime/zsyscalltrace_windows.go
+	// is up-to-date with the list of syscalls in the runtime. It does this by
+	// running syscalltrace_generate_windows.go to generate the list of syscalls
+	// and comparing it to the list in runtime/zsyscalltrace_windows.go.
+
+	tmp := t.TempDir()
+	zout := filepath.Join(tmp, "tmp.go")
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "run", "syscalltrace_generate_windows.go", "-output", zout, "os_windows", "syscalltrace_windows")
+	out, err := cmd.CombinedOutput()
+	if err != nil {
+		t.Fatalf("generating syscalls: %v\n%s", err, out)
+	}
+	want, err := os.ReadFile(zout)
+	if err != nil {
+		t.Fatal(err)
+	}
+	got, err := os.ReadFile(filepath.Join(testenv.GOROOT(t), "src", "runtime", "zsyscalltrace_windows.go"))
+	if err != nil {
+		t.Fatal(err)
+	}
+	if string(got) != string(want) {
+		t.Errorf("syscalltrace_windows.go is out of date. Run go generate in runtime/syscalltrace_windows.go to update it.")
+	}
+}
+
+func TestSyscalltrace(t *testing.T) {
+	testenv.MustHaveGoBuild(t)
+
+	tmp := t.TempDir()
+	source := filepath.Join(tmp, "tmp.go")
+	bin := filepath.Join(tmp, "tmp.exe")
+	trace := filepath.Join(tmp, "trace.csv")
+	err := os.WriteFile(source, []byte(`
+		package main
+		import "syscall"
+		func main() {
+			syscall.CloseHandle(0)
+		}
+	`), 0644)
+	if err != nil {
+		t.Fatal(err)
+	}
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-o", bin, source)
+	out, err := cmd.CombinedOutput()
+	if err != nil {
+		t.Fatalf("building test program: %v\n%s", err, out)
+	}
+	cmd = testenv.Command(t, bin)
+	cmd.Env = []string{"MS_GO_SYSCALL_TRACE=" + trace}
+	out, err = cmd.CombinedOutput()
+	if err != nil {
+		t.Fatalf("running test program: %v\n%s", err, out)
+	}
+	if _, err := os.Stat(trace); err != nil {
+		t.Fatalf("trace file not written: %v", err)
+	}
+	csv, err := os.ReadFile(trace)
+	if err != nil {
+		t.Fatalf("reading trace file: %v", err)
+	}
+	if !strings.Contains(string(csv), "KERNEL32.DLL,CloseHandle\n") {
+		t.Errorf("trace file does not contain expected syscall")
+	}
+}
diff --git a/src/runtime/zsyscalltrace_windows.go b/src/runtime/zsyscalltrace_windows.go
new file mode 100644
index 00000000000000..4731d6fa34a29c
--- /dev/null
+++ b/src/runtime/zsyscalltrace_windows.go
@@ -0,0 +1,60 @@
+// Code generated by syscalltrace_generate_windows.go. DO NOT EDIT.
+
+package runtime
+
+var staticSyscalls = [...]string{
+	"AddVectoredContinueHandler\x00",
+	"AddVectoredExceptionHandler\x00",
+	"CloseHandle\x00",
+	"CreateEventA\x00",
+	"CreateIoCompletionPort\x00",
+	"CreateThread\x00",
+	"CreateWaitableTimerA\x00",
+	"CreateWaitableTimerExW\x00",
+	"DuplicateHandle\x00",
+	"ExitProcess\x00",
+	"FreeEnvironmentStringsW\x00",
+	"GetConsoleMode\x00",
+	"GetCurrentThreadId\x00",
+	"GetEnvironmentStringsW\x00",
+	"GetErrorMode\x00",
+	"GetProcAddress\x00",
+	"GetProcessAffinityMask\x00",
+	"GetQueuedCompletionStatusEx\x00",
+	"GetStdHandle\x00",
+	"GetSystemDirectoryA\x00",
+	"GetSystemInfo\x00",
+	"GetThreadContext\x00",
+	"SetThreadContext\x00",
+	"LoadLibraryExW\x00",
+	"LoadLibraryW\x00",
+	"PostQueuedCompletionStatus\x00",
+	"QueryPerformanceCounter\x00",
+	"QueryPerformanceFrequency\x00",
+	"RaiseFailFastException\x00",
+	"ResumeThread\x00",
+	"RtlLookupFunctionEntry\x00",
+	"RtlVirtualUnwind\x00",
+	"SetConsoleCtrlHandler\x00",
+	"SetErrorMode\x00",
+	"SetEvent\x00",
+	"SetProcessPriorityBoost\x00",
+	"SetThreadPriority\x00",
+	"SetUnhandledExceptionFilter\x00",
+	"SetWaitableTimer\x00",
+	"SuspendThread\x00",
+	"SwitchToThread\x00",
+	"TlsAlloc\x00",
+	"VirtualAlloc\x00",
+	"VirtualFree\x00",
+	"VirtualQuery\x00",
+	"WaitForSingleObject\x00",
+	"WaitForMultipleObjects\x00",
+	"WerGetFlags\x00",
+	"WerSetFlags\x00",
+	"WriteConsoleW\x00",
+	"WriteFile\x00",
+	"CreateFileW\x00",
+	"GetEnvironmentVariableW\x00",
+	"GetModuleFileNameA\x00",
+}
