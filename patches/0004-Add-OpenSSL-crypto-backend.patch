From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Thu, 30 Jun 2022 10:06:19 +0200
Subject: [PATCH] Add OpenSSL crypto backend

---
 src/cmd/api/boring_test.go                    |   2 +-
 src/cmd/dist/test.go                          |   3 +-
 src/cmd/go/go_boring_test.go                  |   2 +-
 .../go/testdata/script/gopath_std_vendor.txt  |   9 +
 src/cmd/link/internal/ld/lib.go               |   1 +
 src/crypto/boring/boring.go                   |   2 +-
 src/crypto/ecdsa/boring.go                    |   2 +-
 src/crypto/ecdsa/notboring.go                 |   2 +-
 src/crypto/internal/backend/bbig/big.go       |   2 +-
 .../internal/backend/bbig/big_openssl.go      |  12 +
 .../internal/backend/fips140/nosystemfips.go  |   2 +
 .../internal/backend/fips140/openssl.go       |  41 +++
 src/crypto/internal/backend/openssl_linux.go  | 283 ++++++++++++++++++
 src/crypto/rsa/boring.go                      |   2 +-
 src/crypto/rsa/boring_test.go                 |   2 +-
 src/crypto/rsa/notboring.go                   |   2 +-
 src/crypto/rsa/rsa_test.go                    |   3 +
 src/crypto/tls/fipsonly/fipsonly.go           |   2 +-
 src/crypto/tls/fipsonly/fipsonly_test.go      |   2 +-
 src/go.mod                                    |   1 +
 src/go.sum                                    |   2 +
 src/go/build/deps_test.go                     |   7 +-
 src/go/build/vendor_test.go                   |   1 +
 src/hash/boring_test.go                       |   2 +-
 src/hash/notboring_test.go                    |   2 +-
 .../goexperiment/exp_opensslcrypto_off.go     |   9 +
 .../goexperiment/exp_opensslcrypto_on.go      |   9 +
 src/internal/goexperiment/flags.go            |   1 +
 src/os/exec/exec_test.go                      |   9 +
 29 files changed, 402 insertions(+), 17 deletions(-)
 create mode 100644 src/crypto/internal/backend/bbig/big_openssl.go
 create mode 100644 src/crypto/internal/backend/fips140/openssl.go
 create mode 100644 src/crypto/internal/backend/openssl_linux.go
 create mode 100644 src/internal/goexperiment/exp_opensslcrypto_off.go
 create mode 100644 src/internal/goexperiment/exp_opensslcrypto_on.go

diff --git a/src/cmd/api/boring_test.go b/src/cmd/api/boring_test.go
index f0e3575637c62a..0e9aceeb832d3b 100644
--- a/src/cmd/api/boring_test.go
+++ b/src/cmd/api/boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 package main
 
diff --git a/src/cmd/dist/test.go b/src/cmd/dist/test.go
index 5a981f8bc147de..b38d84db20172a 100644
--- a/src/cmd/dist/test.go
+++ b/src/cmd/dist/test.go
@@ -1322,12 +1322,11 @@ func (t *tester) registerCgoTests(heading string) {
 			// a C linker warning on Linux.
 			// in function `bio_ip_and_port_to_socket_and_addr':
 			// warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
-			if staticCheck.skip == nil && goos == "linux" && strings.Contains(goexperiment, "boringcrypto") {
+			if staticCheck.skip == nil && goos == "linux" && (strings.Contains(goexperiment, "boringcrypto") || strings.Contains(goexperiment, "opensslcrypto")) {
 				staticCheck.skip = func(*distTest) (string, bool) {
 					return "skipping static linking check on Linux when using boringcrypto to avoid C linker warning about getaddrinfo", true
 				}
 			}
-
 			// Static linking tests
 			if goos != "android" && p != "netbsd/arm" && !t.msan && !t.asan {
 				// TODO(#56629): Why does this fail on netbsd-arm?
diff --git a/src/cmd/go/go_boring_test.go b/src/cmd/go/go_boring_test.go
index ed0fbf3d53d75b..5376227f74cfaa 100644
--- a/src/cmd/go/go_boring_test.go
+++ b/src/cmd/go/go_boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 package main_test
 
diff --git a/src/cmd/go/testdata/script/gopath_std_vendor.txt b/src/cmd/go/testdata/script/gopath_std_vendor.txt
index 4aaf46b5d0f0dc..6fe798cf4a94e9 100644
--- a/src/cmd/go/testdata/script/gopath_std_vendor.txt
+++ b/src/cmd/go/testdata/script/gopath_std_vendor.txt
@@ -1,5 +1,14 @@
 env GO111MODULE=off
 
+# Disable OpenSSLCrypto backend while evaluating test dependencies to avoid importing
+# vendored crypto module dependencies like golang-fips/openssl. This test script
+# is not set up to handle any vendored libraries being imported other than
+# golang.org/x/net/http2/hpack, so we must make sure it is the only one.
+#
+# See https://github.com/microsoft/go/issues/481 for more details, such as the
+# dependency chain that would cause the failure if the gocrypt tag isn't used.
+env GOEXPERIMENT=none
+
 [!compiler:gc] skip
 
 go list -f '{{.Dir}}' vendor/golang.org/x/net/http2/hpack
diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
index 0d38593ec72b2a..5bf022dabe6a5a 100644
--- a/src/cmd/link/internal/ld/lib.go
+++ b/src/cmd/link/internal/ld/lib.go
@@ -1165,6 +1165,7 @@ var hostobj []Hostobj
 // These packages can use internal linking mode.
 // Others trigger external mode.
 var internalpkg = []string{
+	"vendor/github.com/golang-fips/openssl/v2",
 	"crypto/internal/boring",
 	"crypto/internal/boring/syso",
 	"crypto/x509",
diff --git a/src/crypto/boring/boring.go b/src/crypto/boring/boring.go
index 1cf43edba40359..7b04f14ebdd618 100644
--- a/src/crypto/boring/boring.go
+++ b/src/crypto/boring/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 // Package boring exposes functions that are only available when building with
 // Go+BoringCrypto. This package is available on all targets as long as the
diff --git a/src/crypto/ecdsa/boring.go b/src/crypto/ecdsa/boring.go
index 61e70f981db4eb..602cb894e20d39 100644
--- a/src/crypto/ecdsa/boring.go
+++ b/src/crypto/ecdsa/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 package ecdsa
 
diff --git a/src/crypto/ecdsa/notboring.go b/src/crypto/ecdsa/notboring.go
index 19188518e85e65..3cc16ecab567a0 100644
--- a/src/crypto/ecdsa/notboring.go
+++ b/src/crypto/ecdsa/notboring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto
 
 package ecdsa
 
diff --git a/src/crypto/internal/backend/bbig/big.go b/src/crypto/internal/backend/bbig/big.go
index 85bd3ed083f5b2..51bc3c68048d51 100644
--- a/src/crypto/internal/backend/bbig/big.go
+++ b/src/crypto/internal/backend/bbig/big.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto
 
 package bbig
 
diff --git a/src/crypto/internal/backend/bbig/big_openssl.go b/src/crypto/internal/backend/bbig/big_openssl.go
new file mode 100644
index 00000000000000..e6695dd66b1d02
--- /dev/null
+++ b/src/crypto/internal/backend/bbig/big_openssl.go
@@ -0,0 +1,12 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.opensslcrypto
+
+package bbig
+
+import "github.com/golang-fips/openssl/v2/bbig"
+
+var Enc = bbig.Enc
+var Dec = bbig.Dec
diff --git a/src/crypto/internal/backend/fips140/nosystemfips.go b/src/crypto/internal/backend/fips140/nosystemfips.go
index 9e12c6d5d2239c..06b08be3ce5106 100644
--- a/src/crypto/internal/backend/fips140/nosystemfips.go
+++ b/src/crypto/internal/backend/fips140/nosystemfips.go
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
+//go:build !goexperiment.opensslcrypto
+
 package fips140
 
 func systemFIPSMode() bool {
diff --git a/src/crypto/internal/backend/fips140/openssl.go b/src/crypto/internal/backend/fips140/openssl.go
new file mode 100644
index 00000000000000..118efa3a492a7d
--- /dev/null
+++ b/src/crypto/internal/backend/fips140/openssl.go
@@ -0,0 +1,41 @@
+// Copyright 2024 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.opensslcrypto
+
+package fips140
+
+import "syscall"
+
+func systemFIPSMode() bool {
+	var fd int
+	for {
+		var err error
+		fd, err = syscall.Open("/proc/sys/crypto/fips_enabled", syscall.O_RDONLY, 0)
+		if err == nil {
+			break
+		}
+		switch err {
+		case syscall.EINTR:
+			continue
+		case syscall.ENOENT:
+			return false
+		default:
+			// If there is an error reading we could either panic or assume FIPS is not enabled.
+			// Panicking would be too disruptive for apps that don't require FIPS.
+			// If an app wants to be 100% sure that is running in FIPS mode
+			// it should use boring.Enabled() or GOFIPS=1.
+			return false
+		}
+	}
+	defer syscall.Close(fd)
+	var tmp [1]byte
+	n, err := syscall.Read(fd, tmp[:])
+	if n != 1 || err != nil {
+		// We return false instead of panicing for the same reason as before.
+		return false
+	}
+	// fips_enabled can be either '0' or '1'.
+	return tmp[0] == '1'
+}
diff --git a/src/crypto/internal/backend/openssl_linux.go b/src/crypto/internal/backend/openssl_linux.go
new file mode 100644
index 00000000000000..6d273d34923cec
--- /dev/null
+++ b/src/crypto/internal/backend/openssl_linux.go
@@ -0,0 +1,283 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.opensslcrypto && linux && cgo
+
+// Package openssl provides access to OpenSSLCrypto implementation functions.
+// Check the variable Enabled to find out whether OpenSSLCrypto is available.
+// If OpenSSLCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"crypto/internal/backend/fips140"
+	"crypto/internal/boring/sig"
+	"hash"
+	"io"
+	"syscall"
+
+	"github.com/golang-fips/openssl/v2"
+)
+
+// Enabled controls whether FIPS crypto is enabled.
+const Enabled = true
+
+// knownVersions is a list of supported and well-known libcrypto.so suffixes in decreasing version order.
+// FreeBSD library version numbering does not directly align to the version of OpenSSL.
+// Its preferred search order is 11 -> 111.
+// Some distributions use 1.0.0 and others (such as Debian) 1.0.2 to refer to the same OpenSSL 1.0.2 version.
+// Fedora derived distros use different naming for the version 1.0.x.
+var knownVersions = [...]string{"3", "1.1", "11", "111", "1.0.2", "1.0.0", "10"}
+
+const lcryptoPrefix = "libcrypto.so."
+
+func init() {
+	var lcrypto string
+	if version, _ := syscall.Getenv("GO_OPENSSL_VERSION_OVERRIDE"); version != "" {
+		lcrypto = lcryptoPrefix + version
+	} else {
+		// Try to find the highest available FIPS-enabled version of OpenSSL
+		// using the known library suffixes.
+		var lcryptoFallback string
+		for _, v := range knownVersions {
+			lcryptoCandidate := lcryptoPrefix + v
+			if exists, fips := openssl.CheckVersion(lcryptoCandidate); exists {
+				if fips {
+					lcrypto = lcryptoCandidate
+					break
+				}
+				if lcryptoFallback == "" {
+					lcryptoFallback = lcryptoCandidate
+				}
+			}
+		}
+		if lcrypto == "" && lcryptoFallback != "" {
+			// There is no FIPS-enabled version of OpenSSL,
+			// use the highest available version.
+			lcrypto = lcryptoFallback
+		}
+	}
+	if err := openssl.Init(lcrypto); err != nil {
+		panic("opensslcrypto: can't initialize OpenSSL " + lcrypto + ": " + err.Error())
+	}
+	if fips140.Enabled() {
+		if !openssl.FIPS() {
+			if err := openssl.SetFIPS(true); err != nil {
+				panic("opensslcrypto: can't enable FIPS mode for " + openssl.VersionText() + ": " + err.Error())
+			}
+		}
+	} else if fips140.Disabled() {
+		if openssl.FIPS() {
+			if err := openssl.SetFIPS(false); err != nil {
+				panic("opensslcrypto: can't disable FIPS mode for " + openssl.VersionText() + ": " + err.Error())
+			}
+		}
+	}
+	sig.BoringCrypto()
+}
+
+const RandReader = openssl.RandReader
+
+func SupportsHash(h crypto.Hash) bool {
+	return openssl.SupportsHash(h)
+}
+
+func NewMD5() hash.Hash    { return openssl.NewMD5() }
+func NewSHA1() hash.Hash   { return openssl.NewSHA1() }
+func NewSHA224() hash.Hash { return openssl.NewSHA224() }
+func NewSHA256() hash.Hash { return openssl.NewSHA256() }
+func NewSHA384() hash.Hash { return openssl.NewSHA384() }
+func NewSHA512() hash.Hash { return openssl.NewSHA512() }
+
+func MD5(p []byte) (sum [16]byte)    { return openssl.MD5(p) }
+func SHA1(p []byte) (sum [20]byte)   { return openssl.SHA1(p) }
+func SHA224(p []byte) (sum [28]byte) { return openssl.SHA224(p) }
+func SHA256(p []byte) (sum [32]byte) { return openssl.SHA256(p) }
+func SHA384(p []byte) (sum [48]byte) { return openssl.SHA384(p) }
+func SHA512(p []byte) (sum [64]byte) { return openssl.SHA512(p) }
+
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash { return openssl.NewHMAC(h, key) }
+
+func NewAESCipher(key []byte) (cipher.Block, error)   { return openssl.NewAESCipher(key) }
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error)   { return openssl.NewGCMTLS(c) }
+func NewGCMTLS13(c cipher.Block) (cipher.AEAD, error) { return openssl.NewGCMTLS13(c) }
+
+type PublicKeyECDSA = openssl.PublicKeyECDSA
+type PrivateKeyECDSA = openssl.PrivateKeyECDSA
+
+func GenerateKeyECDSA(curve string) (X, Y, D openssl.BigInt, err error) {
+	return openssl.GenerateKeyECDSA(curve)
+}
+
+func NewPrivateKeyECDSA(curve string, X, Y, D openssl.BigInt) (*openssl.PrivateKeyECDSA, error) {
+	return openssl.NewPrivateKeyECDSA(curve, X, Y, D)
+}
+
+func NewPublicKeyECDSA(curve string, X, Y openssl.BigInt) (*openssl.PublicKeyECDSA, error) {
+	return openssl.NewPublicKeyECDSA(curve, X, Y)
+}
+
+func SignMarshalECDSA(priv *openssl.PrivateKeyECDSA, hash []byte) ([]byte, error) {
+	return openssl.SignMarshalECDSA(priv, hash)
+}
+
+func VerifyECDSA(pub *openssl.PublicKeyECDSA, hash []byte, sig []byte) bool {
+	return openssl.VerifyECDSA(pub, hash, sig)
+}
+
+type PublicKeyRSA = openssl.PublicKeyRSA
+type PrivateKeyRSA = openssl.PrivateKeyRSA
+
+func DecryptRSAOAEP(h, mgfHash hash.Hash, priv *openssl.PrivateKeyRSA, ciphertext, label []byte) ([]byte, error) {
+	return openssl.DecryptRSAOAEP(h, mgfHash, priv, ciphertext, label)
+}
+
+func DecryptRSAPKCS1(priv *openssl.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return openssl.DecryptRSAPKCS1(priv, ciphertext)
+}
+
+func DecryptRSANoPadding(priv *openssl.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return openssl.DecryptRSANoPadding(priv, ciphertext)
+}
+
+func EncryptRSAOAEP(h, mgfHash hash.Hash, pub *openssl.PublicKeyRSA, msg, label []byte) ([]byte, error) {
+	return openssl.EncryptRSAOAEP(h, mgfHash, pub, msg, label)
+}
+
+func EncryptRSAPKCS1(pub *openssl.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return openssl.EncryptRSAPKCS1(pub, msg)
+}
+
+func EncryptRSANoPadding(pub *openssl.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return openssl.EncryptRSANoPadding(pub, msg)
+}
+
+func GenerateKeyRSA(bits int) (N, E, D, P, Q, Dp, Dq, Qinv openssl.BigInt, err error) {
+	return openssl.GenerateKeyRSA(bits)
+}
+
+func NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv openssl.BigInt) (*openssl.PrivateKeyRSA, error) {
+	return openssl.NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv)
+}
+
+func NewPublicKeyRSA(N, E openssl.BigInt) (*openssl.PublicKeyRSA, error) {
+	return openssl.NewPublicKeyRSA(N, E)
+}
+
+func SignRSAPKCS1v15(priv *openssl.PrivateKeyRSA, h crypto.Hash, hashed []byte) ([]byte, error) {
+	return openssl.SignRSAPKCS1v15(priv, h, hashed)
+}
+
+func SignRSAPSS(priv *openssl.PrivateKeyRSA, h crypto.Hash, hashed []byte, saltLen int) ([]byte, error) {
+	return openssl.SignRSAPSS(priv, h, hashed, saltLen)
+}
+
+func VerifyRSAPKCS1v15(pub *openssl.PublicKeyRSA, h crypto.Hash, hashed, sig []byte) error {
+	return openssl.VerifyRSAPKCS1v15(pub, h, hashed, sig)
+}
+
+func VerifyRSAPSS(pub *openssl.PublicKeyRSA, h crypto.Hash, hashed, sig []byte, saltLen int) error {
+	return openssl.VerifyRSAPSS(pub, h, hashed, sig, saltLen)
+}
+
+type PublicKeyECDH = openssl.PublicKeyECDH
+type PrivateKeyECDH = openssl.PrivateKeyECDH
+
+func ECDH(priv *openssl.PrivateKeyECDH, pub *openssl.PublicKeyECDH) ([]byte, error) {
+	return openssl.ECDH(priv, pub)
+}
+
+func GenerateKeyECDH(curve string) (*openssl.PrivateKeyECDH, []byte, error) {
+	return openssl.GenerateKeyECDH(curve)
+}
+
+func NewPrivateKeyECDH(curve string, bytes []byte) (*openssl.PrivateKeyECDH, error) {
+	return openssl.NewPrivateKeyECDH(curve, bytes)
+}
+
+func NewPublicKeyECDH(curve string, bytes []byte) (*openssl.PublicKeyECDH, error) {
+	return openssl.NewPublicKeyECDH(curve, bytes)
+}
+
+func SupportsHKDF() bool {
+	return openssl.SupportsHKDF()
+}
+
+func ExpandHKDF(h func() hash.Hash, pseudorandomKey, info []byte) (io.Reader, error) {
+	return openssl.ExpandHKDF(h, pseudorandomKey, info)
+}
+
+func ExtractHKDF(h func() hash.Hash, secret, salt []byte) ([]byte, error) {
+	return openssl.ExtractHKDF(h, secret, salt)
+}
+
+func SupportsTLS1PRF() bool {
+	return openssl.SupportsTLS1PRF()
+}
+
+func TLS1PRF(h func() hash.Hash, secret []byte, label string, seed []byte, keyLen int) []byte {
+	result := make([]byte, keyLen)
+	if err := openssl.TLS1PRF(result, secret, []byte(label), seed, h); err != nil {
+		panic(err)
+	}
+	return result
+}
+
+func TLS1PRF(result, secret, label, seed []byte, h func() hash.Hash) error {
+	return openssl.TLS1PRF(result, secret, label, seed, h)
+}
+
+func SupportsDESCipher() bool {
+	return openssl.SupportsDESCipher()
+}
+
+func SupportsTripleDESCipher() bool {
+	return openssl.SupportsTripleDESCipher()
+}
+
+func NewDESCipher(key []byte) (cipher.Block, error) {
+	return openssl.NewDESCipher(key)
+}
+
+func NewTripleDESCipher(key []byte) (cipher.Block, error) {
+	return openssl.NewTripleDESCipher(key)
+}
+
+func SupportsRC4() bool {
+	return openssl.SupportsRC4()
+}
+
+type RC4Cipher = openssl.RC4Cipher
+
+func NewRC4Cipher(key []byte) (*RC4Cipher, error) { return openssl.NewRC4Cipher(key) }
+
+func SupportsEd25519() bool { return openssl.SupportsEd25519() }
+
+type PublicKeyEd25519 = openssl.PublicKeyEd25519
+type PrivateKeyEd25519 = openssl.PrivateKeyEd25519
+
+func GenerateKeyEd25519() (*PrivateKeyEd25519, error) {
+	return openssl.GenerateKeyEd25519()
+}
+
+func NewPrivateKeyEd25119(priv []byte) (*PrivateKeyEd25519, error) {
+	return openssl.NewPrivateKeyEd25119(priv)
+}
+
+func NewPublicKeyEd25119(pub []byte) (*PublicKeyEd25519, error) {
+	return openssl.NewPublicKeyEd25119(pub)
+}
+
+func NewPrivateKeyEd25519FromSeed(seed []byte) (*PrivateKeyEd25519, error) {
+	return openssl.NewPrivateKeyEd25519FromSeed(seed)
+}
+
+func SignEd25519(priv *PrivateKeyEd25519, message []byte) ([]byte, error) {
+	return openssl.SignEd25519(priv, message)
+}
+
+func VerifyEd25519(pub *PublicKeyEd25519, message, sig []byte) error {
+	return openssl.VerifyEd25519(pub, message, sig)
+}
diff --git a/src/crypto/rsa/boring.go b/src/crypto/rsa/boring.go
index ecb43aaf264743..220f8c05c3d94b 100644
--- a/src/crypto/rsa/boring.go
+++ b/src/crypto/rsa/boring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 package rsa
 
diff --git a/src/crypto/rsa/boring_test.go b/src/crypto/rsa/boring_test.go
index 838fcc1244bdbe..0094648f065f8d 100644
--- a/src/crypto/rsa/boring_test.go
+++ b/src/crypto/rsa/boring_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 // Note: Can run these tests against the non-BoringCrypto
 // version of the code by using "CGO_ENABLED=0 go test".
diff --git a/src/crypto/rsa/notboring.go b/src/crypto/rsa/notboring.go
index 34c22c8fbba7da..933ac569e034a8 100644
--- a/src/crypto/rsa/notboring.go
+++ b/src/crypto/rsa/notboring.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build !boringcrypto
+//go:build !boringcrypto && !goexperiment.opensslcrypto
 
 package rsa
 
diff --git a/src/crypto/rsa/rsa_test.go b/src/crypto/rsa/rsa_test.go
index 9b4d2502dc1d93..d37351d1fc3229 100644
--- a/src/crypto/rsa/rsa_test.go
+++ b/src/crypto/rsa/rsa_test.go
@@ -820,6 +820,9 @@ func TestDecryptOAEP(t *testing.T) {
 }
 
 func Test2DecryptOAEP(t *testing.T) {
+	if boring.Enabled {
+		t.Skip("OpenSSL backend does not supports OAEPOptions.MGFHash yet.")
+	}
 	random := rand.Reader
 
 	msg := []byte{0xed, 0x36, 0x90, 0x8d, 0xbe, 0xfc, 0x35, 0x40, 0x70, 0x4f, 0xf5, 0x9d, 0x6e, 0xc2, 0xeb, 0xf5, 0x27, 0xae, 0x65, 0xb0, 0x59, 0x29, 0x45, 0x25, 0x8c, 0xc1, 0x91, 0x22}
diff --git a/src/crypto/tls/fipsonly/fipsonly.go b/src/crypto/tls/fipsonly/fipsonly.go
index e702f44e986746..03229f144761b2 100644
--- a/src/crypto/tls/fipsonly/fipsonly.go
+++ b/src/crypto/tls/fipsonly/fipsonly.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 // Package fipsonly restricts all TLS configuration to FIPS-approved settings.
 //
diff --git a/src/crypto/tls/fipsonly/fipsonly_test.go b/src/crypto/tls/fipsonly/fipsonly_test.go
index 027bc22c33c921..93d807d5305e59 100644
--- a/src/crypto/tls/fipsonly/fipsonly_test.go
+++ b/src/crypto/tls/fipsonly/fipsonly_test.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build boringcrypto
+//go:build boringcrypto || goexperiment.opensslcrypto
 
 package fipsonly
 
diff --git a/src/go.mod b/src/go.mod
index 47ef05be87c09a..501573834a2952 100644
--- a/src/go.mod
+++ b/src/go.mod
@@ -3,6 +3,7 @@ module std
 go 1.24
 
 require (
+	github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3
 	golang.org/x/crypto v0.29.0
 	golang.org/x/net v0.31.0
 )
diff --git a/src/go.sum b/src/go.sum
index 9d72b7d6542c13..fd9696fcb03d3b 100644
--- a/src/go.sum
+++ b/src/go.sum
@@ -1,3 +1,5 @@
+github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3 h1:5QU8ZbOJ8pUBEhxIOm6+teyQMgeBFu3Gos5ue7Rvlgg=
+github.com/golang-fips/openssl/v2 v2.0.4-0.20241031074328-c51a090851d3/go.mod h1:OYUBsoxLpFu8OFyhZHxfpN8lgcsw8JhTC3BQK7+XUc0=
 golang.org/x/crypto v0.29.0 h1:L5SG1JTTXupVV3n6sUqMTeWbjAyfPwoda2DLX8J8FrQ=
 golang.org/x/crypto v0.29.0/go.mod h1:+F4F4N5hv6v38hfeYwTdx20oUvLLc+QfrE9Ax9HtgRg=
 golang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=
diff --git a/src/go/build/deps_test.go b/src/go/build/deps_test.go
index 364e26a752540a..f9f0beca1a70f5 100644
--- a/src/go/build/deps_test.go
+++ b/src/go/build/deps_test.go
@@ -514,6 +514,8 @@ var depsRules = `
 	crypto/cipher,
 	crypto/internal/boring/bcache,
 	crypto/internal/backend/fips140
+	< github.com/golang-fips/openssl/v2/internal/subtle
+	< github.com/golang-fips/openssl/v2
 	< crypto/internal/boring
 	< crypto/internal/backend
 	< crypto/boring;
@@ -546,6 +548,7 @@ var depsRules = `
 
 	# CRYPTO-MATH is core bignum-based crypto - no cgo, net; fmt now ok.
 	CRYPTO, FMT, math/big
+	< github.com/golang-fips/openssl/v2/bbig
 	< crypto/internal/boring/bbig
 	< crypto/internal/backend/bbig
 	< crypto/rand
@@ -845,7 +848,7 @@ var buildIgnore = []byte("\n//go:build ignore")
 
 func findImports(pkg string) ([]string, error) {
 	vpkg := pkg
-	if strings.HasPrefix(pkg, "golang.org") {
+	if strings.HasPrefix(pkg, "golang.org") || strings.HasPrefix(pkg, "github.com") {
 		vpkg = "vendor/" + pkg
 	}
 	dir := filepath.Join(Default.GOROOT, "src", vpkg)
@@ -855,7 +858,7 @@ func findImports(pkg string) ([]string, error) {
 	}
 	var imports []string
 	var haveImport = map[string]bool{}
-	if pkg == "crypto/internal/boring" {
+	if pkg == "crypto/internal/boring" || pkg == "github.com/golang-fips/openssl/v2" {
 		haveImport["C"] = true // kludge: prevent C from appearing in crypto/internal/boring imports
 	}
 	fset := token.NewFileSet()
diff --git a/src/go/build/vendor_test.go b/src/go/build/vendor_test.go
index 7f6237ffd59c11..7c821ae4bc5727 100644
--- a/src/go/build/vendor_test.go
+++ b/src/go/build/vendor_test.go
@@ -22,6 +22,7 @@ var allowedPackagePrefixes = []string{
 	"github.com/google/pprof",
 	"github.com/ianlancetaylor/demangle",
 	"rsc.io/markdown",
+	"github.com/golang-fips/openssl",
 }
 
 // Verify that the vendor directories contain only packages matching the list above.
diff --git a/src/hash/boring_test.go b/src/hash/boring_test.go
index c90899062a9665..802c0f8b8987bf 100644
--- a/src/hash/boring_test.go
+++ b/src/hash/boring_test.go
@@ -1,4 +1,4 @@
-//go:build goexperiment.boringcrypto
+//go:build goexperiment.boringcrypto || goexperiment.opensslcrypto
 
 package hash_test
 
diff --git a/src/hash/notboring_test.go b/src/hash/notboring_test.go
index 79f8c22f2b7416..f3e8ed3e1cbf20 100644
--- a/src/hash/notboring_test.go
+++ b/src/hash/notboring_test.go
@@ -1,4 +1,4 @@
-//go:build !goexperiment.boringcrypto
+//go:build !goexperiment.boringcrypto && !goexperiment.opensslcrypto
 
 package hash_test
 
diff --git a/src/internal/goexperiment/exp_opensslcrypto_off.go b/src/internal/goexperiment/exp_opensslcrypto_off.go
new file mode 100644
index 00000000000000..62033547c6143a
--- /dev/null
+++ b/src/internal/goexperiment/exp_opensslcrypto_off.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build !goexperiment.opensslcrypto
+// +build !goexperiment.opensslcrypto
+
+package goexperiment
+
+const OpenSSLCrypto = false
+const OpenSSLCryptoInt = 0
diff --git a/src/internal/goexperiment/exp_opensslcrypto_on.go b/src/internal/goexperiment/exp_opensslcrypto_on.go
new file mode 100644
index 00000000000000..a7f2712e9e1464
--- /dev/null
+++ b/src/internal/goexperiment/exp_opensslcrypto_on.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build goexperiment.opensslcrypto
+// +build goexperiment.opensslcrypto
+
+package goexperiment
+
+const OpenSSLCrypto = true
+const OpenSSLCryptoInt = 1
diff --git a/src/internal/goexperiment/flags.go b/src/internal/goexperiment/flags.go
index e126e388e84025..233a12ee542328 100644
--- a/src/internal/goexperiment/flags.go
+++ b/src/internal/goexperiment/flags.go
@@ -59,6 +59,7 @@ type Flags struct {
 	PreemptibleLoops  bool
 	StaticLockRanking bool
 	BoringCrypto      bool
+	OpenSSLCrypto     bool
 
 	// SystemCrypto enables the OpenSSL or CNG crypto experiment depending on
 	// which one is appropriate on the target GOOS.
diff --git a/src/os/exec/exec_test.go b/src/os/exec/exec_test.go
index 8c623871932f7d..2fa55073f5c19c 100644
--- a/src/os/exec/exec_test.go
+++ b/src/os/exec/exec_test.go
@@ -14,6 +14,7 @@ import (
 	"errors"
 	"flag"
 	"fmt"
+	"internal/goexperiment"
 	"internal/poll"
 	"internal/testenv"
 	"io"
@@ -689,6 +690,14 @@ func TestExtraFiles(t *testing.T) {
 		t.Skipf("skipping test on %q", runtime.GOOS)
 	}
 
+	if goexperiment.OpenSSLCrypto {
+		// OpenSSL default behavior is to maintain open FDs to any
+		// random devices that get used by the random number library.
+		// Since those FDs are not marked FD_CLOEXEC or O_CLOEXEC,
+		// they also get inherited by children.
+		t.Skip("skipping test because test was run with OpenSSLCrypto")
+	}
+
 	// Force network usage, to verify the epoll (or whatever) fd
 	// doesn't leak to the child,
 	ln, err := net.Listen("tcp", "127.0.0.1:0")
